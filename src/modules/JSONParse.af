

.needs <std>
import string from "String";
import { fString } from "String" under st;
import { fPrint } from "io" under io;
import List from "Collections";

/*
 * Take in a string and a json string and return a string
 * value.
 */
export string getString(string key, string json) {
    let start = json.find(key, 0) + key.len() + 2;
    let newString = json.subString(start, json.len());
    let newStart = newString.find("\"", 0);
    let newEnd = newString.find("\"", newStart + 1);
    let value = newString.subString(newStart + 1, newEnd);
    return value;
};

/*
 * Take in a string and a json string and return a int
 * value.
 */
export int getInt(string key, string json) {
    let start = json.find(key, 0) + key.len() + 2;
    let end = json.find(",", start);
    if end == -1 {
        end = json.find("}", start);
    };
    let value = json.subString(start, end);
    value = value.trim(' ');
    if !value.isNumeric() {
        return 0;
    };
    return value.toInt();
};

/*
 * Take in a string and a json string and return a json string
 * value.  ***NOTE:*** This function is not complete.  It will
 * not work for nested json objects.
 */
export string getJson(string key, string json) {
    let start = json.find(key, 0) + key.len() + 2;
    let newString = json.subString(start, json.len());
    let newStart = newString.find("{", 0);
    let afterOpen = newString.subString(newStart + 1, newString.len());
    int openCount = 1;
    int closeCount = 0;

    for int i = 0; i < afterOpen.len(); i++ {
        char c = afterOpen.at(i);
        if c == '{' {
            openCount++;
        } else if c == '}' {
            closeCount++;
        };
        if openCount == closeCount {
            let value = afterOpen.subString(0, i);
            return st.fString("{%s}", {value});
        };
    };
    return new string("undefined");
};

/*
 * Consume a key and a json string and return a list of
 * strings.
 */
export List getList(string key, string json) {
    let start = json.find(key, 0) + key.len() + 2;
    let newString = json.subString(start, json.len());
    let newStart = newString.find("[", 0);
    let afterOpen = newString.subString(newStart + 1, newString.len());
    int openCount = 1;
    int closeCount = 0;

    string listBuffer = "";
    List ret = new List(string);
    
    const let flush = [string s] => {
        if s.len() > 0
            s = "";
    };

    let inQuote = false;
    let inObject = false;

    for int i = 0; i < afterOpen.len(); i++ {
        char c = afterOpen.at(i);
        if c == '[' {
            openCount++;
        } else if c == ']' {
            closeCount++;
        };

        if (c == '"') & (openCount - closeCount == 1) & (!inObject) {
            inQuote = !inQuote;
        };

        if (c == '{') & (openCount - closeCount == 1) {
            inObject = true;
        };

        if (c == '}') & (openCount - closeCount == 1) {
            inObject = false;
        };


        if (openCount - closeCount == 1) & (!inQuote) & (!inObject) {
            if c == ',' {
                ret.pushBack(listBuffer.trim(' '));
                flush(listBuffer);
            } else {
                listBuffer = listBuffer.push(c);
            };
        } else {
            listBuffer = listBuffer.push(c);
        };

        if openCount == closeCount {
            if listBuffer.at(listBuffer.len() - 1) == ']'
                listBuffer = listBuffer.subString(0, listBuffer.len() - 1);
            ret.pushBack(listBuffer.trim(' '));
            return ret;
        };
    };
    return ret;
};
