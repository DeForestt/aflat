.needs <std>

import File from "files";
import { createFile, openFile } from "files" under fs;
import string from "String";
import { fString } from "String" under st;
import { system } from "System" under sys;
import List from "Collections";

import { fPrint } from "io" under io;

class Package {
    mutable string name = "undef";
    mutable string body = "undef";

    Package init(string body, string name) {
        my.name = name;
        my.body = body;
    };

    bool install() {
        let PATH = st.fString("./src/modules/%s.af", {my.name});
        let cfgTxt = st.fString("m modules/%s", {my.name});

        mutable File packageFile = fs.createFile(PATH.cstr()).expect("Could not create file");
        if (packageFile == NULL){
            sys.system("mkdir ./src/modules");
            packageFile = fs.createFile(PATH.cstr()).expect("Could not create file");
            if (packageFile == NULL) {
                io.fPrint("Error: Could not create file %s", {PATH});
                return false;
            };
        };
        packageFile.write(my.body.cstr());

        const File confFile = fs.openFile("./aflat.cfg").expect("Could not open aflat.cfg");
        
        let configList = confFile.toList('\n');
        confFile.close();
        mutable let buffer = new string("");
        mutable bool updated = false;
        for int i = 0; i < configList.getCount(); i++ {
            let text = new string(configList.get(i).expect("Could not get config line"));

            if !(text == "") buffer = st.fString("%s%a\n", {buffer, configList.get(i)});

            if (text == cfgTxt) {
                updated = true;
            };
        };
        if !updated  buffer = st.fString("%s%s", {buffer, cfgTxt});
        File confFile2 = fs.createFile("./aflat.cfg").expect("Could not create file");
        confFile2.write(buffer.cstr());
        return updated;
    };
};