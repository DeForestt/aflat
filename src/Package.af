.needs <std>

import File from "files";
import { createFile, openFile } from "files" under fs;
import string from "String";
import { fString } from "String" under st;
import { system } from "System" under sys;
import List from "Collections";

import { fPrint } from "io" under io;

class Package {
    string name = "undef";
    string version = "undef";
    string description = "undef";
    string author = "undef";
    string code = "undef";

    Package init(string json) {
        int nameLoc = json.find("\"name\":", 0);
        nameLoc = json.find("\"", nameLoc + 7);
        int descriptionLoc = json.find("\"description\":", nameLoc);
        
        my.name = json.subString(nameLoc + 1, descriptionLoc - 2);
        
        descriptionLoc = json.find("\"", descriptionLoc + 14);
        int codeLoc = json.find("\"code\":", descriptionLoc);


        my.description = json.subString(descriptionLoc + 1, codeLoc - 2);

        codeLoc = json.find("\"", codeLoc + 7);
        int authorLoc = json.find("\"author\":", codeLoc);

        my.code = json.subString(codeLoc + 1, authorLoc - 2);

        authorLoc = json.find("\"", authorLoc + 9);

        int versionLoc = json.find("\"version\":", authorLoc);

        my.author = json.subString(authorLoc + 1, versionLoc - 2);
    };

    bool install() {
        const let PATH = st.fString("./src/modules/%s.af", {my.name});

        let packageFile = fs.createFile(PATH.cstr());
        if (packageFile == NULL){
            sys.system("mkdir ./src/modules");
            packageFile = fs.createFile(PATH.cstr());
            if (packageFile == NULL) {
                io.fPrint("Error: Could not create file %s", {PATH});
                return false;
            };
        };
        packageFile.write(my.code.cstr());
        // use bash to replace '\"' with '"'
        let s = st.fString("s/%c%c%c%c/%c\"/g", {'\\', '\\', '\\', '"', '\\'});
        string cmd = st.fString("sed -i '%s' %s", {s, PATH});
        sys.system(cmd.cstr());

        const let confFile = fs.openFile("./aflat.cfg");
        if (confFile == NULL) {
            io.fPrint("Error: Could not open aflat.cfg");
            return false;
        };
        
        let configList = confFile.toList('\n');
        confFile.close();
        let buffer = new string("");

        for int i = 0; i < configList.getCount(); i++ {
            let text = new string(configList.get(i));
           // io.fPrint("text: %s...", {text});
            if (text == "") io.fPrint("")
            else buffer = st.fString("%s%a\n", {buffer, configList.get(i)});
        };
        buffer = st.fString("%sm %s", {buffer, my.name});
        let confFile2 = fs.createFile("./aflat.cfg");
        confFile2.write(buffer.cstr());
    };

};