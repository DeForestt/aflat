.needs <std>
import {print} from "String" under str;
import string from "String";
import List from "Collections";
import Map from "Utils/Map";
import result from "Utils/result";
import {describe, it, assertEqual, assertTrue, fix} from "ATest" under test;
import JSONObject, JSONValue, JSONType from "JSON";

fn main() -> int{
	test.describe("String", fn () {
        test.it("should get the length of a string", fn () {
            string s = "Hello, World!";
            test.assertEqual(s.len(), 13);
        });

        test.it("should compare two strings", fn () {
            string s1 = "Hello";
            string s2 = "Hello";
            test.assertTrue(s1 == s2);
        });

        test.it("should push a character", fn () {
            string s = new string("abc");
            const let r = s.push('d');
            // test.assertEqual(r.len(), 4);
            test.assertTrue(r == "abcd");
        });

        test.it("should convert to upper and lower", fn () {
            string s = "AfLaT";
            test.assertTrue(s.toLower() == "aflat");
            test.assertTrue(s.toUpper() == "AFLAT");
        });

        test.it("should parse numeric strings", fn () {
            string s = new string("42");
            test.assertTrue(s.isNumeric());
            const let r = s.toInt();
            match r {
                Ok(val) => test.assertEqual(val, 42),
                Err() => test.assertTrue(false)
            };
        });
        
        test.it("should replace characters", fn () {
            string s = "foo bar";
            test.assertTrue(s.replaceChar(' ', '_') == "foo_bar");
        });

        test.it("should create substrings", fn () {
            string s = "hello";
            test.assertTrue(s.subString(1, 4) == "ell");
        });

        return true;
    });
        
}; 
