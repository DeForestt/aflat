.needs <std>

import LinkedList from "Collections";
import ArgsList from "CLArgs";
import string from "String";
import {fString} from "String" under st;
import fPrint from "io" under io;
import { worker } from "concurrency" under async;
import Result from "concurrency";
import HTTPRequest, HTTPMethod, HTTPResponse from "HTTP";
import {requestWorker} from "HTTP" under http;
import List from "Collections";
import Package from "./src/Package";
import { loadingBar } from "./src/modules/LoadingBar" under load;

const let VERSION = "0.1.0";

class PackageQuery {
    string name = name;
    string version = version;
    string author = author;

    PackageQuery init(adr name, adr version, adr author) {
        return my;
    };

    string getQuery() {
        string query = st.fString("?name=%s", {my.name});
        if !(my.version == "") {
            query = st.fString("%s&version=%s", {query, my.version});
        };
        if !(my.author == "") {
            query = st.fString("%s&author=%s", {query, my.author});
        };
        return query.copy();
    };
};

string getBodyFromID(string id) {
    let req = HTTPRequest(HTTPMethod.GET);

    req.setHost("api.aflatlang.com");
    const let endpoint = st.fString("/modules/%s", {id});
	req.setEndpoint(endpoint.cstr());
	req.addHeader("User-Agent", "Mozilla/4.0 (compatible; MSIE5.01; Windows NT)");
	req.addHeader("Host", "api.aflatlang.com");
	req.addHeader("Accept-Language", "en-us");
	req.addHeader("Accept-Encoding", "gzip, deflate");
	req.addHeader("X-Powered-By", "AFLAT");
	req.addHeader("Content-Type", "application/json");
	req.addHeader("Connection", "Keep-Alive");

    let res = req.send(1000000);

    return res.body;
};

int installPackage(PackageQuery _arg) {
    const let _package = _arg;
    const let cname = _package.name.copy();
    io.fPrint("Searching for Package: %s\n", {_package.name});

    let req = HTTPRequest(HTTPMethod.GET);
    req.setHost("api.aflatlang.com");
    const let endpoint = st.fString("/modules%s", {_package.getQuery()});
	req.setEndpoint(endpoint.cstr());
	req.addHeader("User-Agent", "Mozilla/4.0 (compatible; MSIE5.01; Windows NT)");
	req.addHeader("Host", "api.aflatlang.com");
	req.addHeader("Accept-Language", "en-us");
	req.addHeader("Accept-Encoding", "gzip, deflate");
	req.addHeader("X-Powered-By", "AFLAT");
	req.addHeader("Content-Type", "application/json");
	req.addHeader("Connection", "Keep-Alive");

    // Result loading = load.loadingBar();
    let res = req.send(1000000);

    io.fPrint("Body: %s\n", {res.body});

    // find the package id
    let idIndex = res.body.find("\"id\":", 0) + 5;
    let openQuote = res.body.find("\"", idIndex);
    let closeQuote = res.body.find("\"", openQuote + 1);

    // find the package name
    let nameIndex = res.body.find("\"name\":", 0) + 7;
    let openQuote2 = res.body.find("\"", nameIndex);
    let closeQuote2 = res.body.find("\"", openQuote2 + 1);

    // find the package version
    let versionIndex = res.body.find("\"version\":", 0) + 10;
    let openQuote3 = res.body.find("\"", versionIndex);
    let closeQuote3 = res.body.find("\"", openQuote3 + 1);

    // find the package author
    let authorIndex = res.body.find("\"author\":", 0) + 9;
    let openQuote4 = res.body.find("\"", authorIndex);
    let closeQuote4 = res.body.find("\"", openQuote4 + 1);

    let id = res.body.subString(openQuote + 1, closeQuote);
    let name = res.body.subString(openQuote2 + 1, closeQuote2);
    let version = res.body.subString(openQuote3 + 1, closeQuote3);
    let author = res.body.subString(openQuote4 + 1, closeQuote4);
    // loading.kill();

    if !(name == cname) {
        io.fPrint("Package not found\n");
        return 1;
    };

    string body = getBodyFromID(id);

    let package = Package(body, name);
    let updated = package.install();

    io.fPrint("\rSuccessfully %a package: %s\n", {if updated "updated" else "installed" , name});
    io.fPrint("Package ID: %s\n", {id});
    io.fPrint("Package Name: %s\n", {name});
    io.fPrint("Package Version: %s\n", {version});
    io.fPrint("Package Author: %s\n", {author});

    return 0;
};

int main(int argc, adr argv) {
    const adr[0] args = argv;

    if argc < 2 {
        io.fPrint("Usage: %a <args> <file>\n", {args[0]});
        return 1;
    };

    ArgsList argsList = ArgsList(argc, argv, {
        "h", "-help", // help
        "v", "-version", // version
        "i", "-install", // install
        "a", "-author", // author
        NULL // must be NULL terminated
    });

    if argsList.has("i") | argsList.has("-install") {
        string package = argsList.getArg("i");
        string version = "";
        string author = "";

        if package == "" {
            package = argsList.getArg("-install");
        };
        if package == "" {
            io.fPrint("Usage: %s -i <package>\n", {argsList.progName});
            return 1;
        };

        if argsList.has("v") | argsList.has("-version") {
            version = argsList.getArg("v");
            if version == "" {
                version = argsList.getArg("-version");
            };
        };

        if argsList.has("a") | argsList.has("-author") {
            author = argsList.getArg("a");
            if author == "" {
                author = argsList.getArg("-author");
            };
        };

        PackageQuery query = new PackageQuery(package.cstr(), version.cstr(), author.cstr());
        return installPackage(query);
    };

    if argsList.has("h") {
        io.fPrint("Usage: %a <args> <file>\n", {args[0]});
        return 0;
    };

    if argsList.has("v") | argsList.has("-version") {
        io.fPrint("Version: %a\n", {VERSION});
        return 0;
    };
    return 0;
};