.needs <std>

import LinkedList from "Collections";
import ArgsList from "CLArgs";
import string from "String";
import {fString, print} from "String" under st;
import { fPrint } from "io" under io;
import { worker } from "concurrency" under async;
import AsyncResult from "concurrency";
import HTTPRequest, HTTPMethod, HTTPMessage from "HTTP";
import { requestWorker } from "HTTP" under http;
import List from "Collections";
import Package from "./src/Package";
import { getString } from "./src/modules/JSONParse" under json;
import Result from "Utils/Result";

const let VERSION = "0.1.0";

class PackageQuery {
    string name = name;
    string version = version;
    string author = author;
    string u = u;

    PackageQuery init(adr name, adr version, adr author, adr u) {
        return my;
    };

    string getQuery() {
        mutable string query = st.fString("*name=%s", {my.name});
        if !(my.version == "") {
            query = st.fString("%s&version=%s", {query, my.version});
        };
        if !(my.author == "") {
            query = st.fString("%s&author=%s", {query, my.author});
        };
        return query.copy();
    };
};

string getBodyFromID(string id) {
    let req = HTTPRequest(HTTPMethod.GET);

    req.setHost("api.aflatlang.com");
    const let endpoint = st.fString("/modules/%s", {id});
	req.setEndpoint(endpoint.cstr());
	req.addHeader("User-Agent", "Mozilla/4.0 (compatible; MSIE5.01; Windows NT)");
	req.addHeader("Host", "api.aflatlang.com");
	req.addHeader("Accept-Language", "en-us");
	req.addHeader("Accept-Encoding", "gzip, deflate");
	req.addHeader("X-Powered-By", "AFLAT");
	req.addHeader("Content-Type", "application/json");
	req.addHeader("Connection", "Keep-Alive");

    let res = req.send(1000000);

    return res.body;
};

any installPackage(PackageQuery pkg) : async.worker {
    const let _package = pkg;
    const let cname = _package.name.copy();
    const let cunder = _package.u.copy();
    io.fPrint("Searching for Package: %s\n", {_package.name});

    let req = HTTPRequest(HTTPMethod.GET);
    req.setHost("api.aflatlang.com");
    const let endpoint = st.fString("/modules%s", {_package.getQuery()});
	req.setEndpoint(endpoint.cstr());
	req.addHeader("User-Agent", "Mozilla/4.0 (compatible; MSIE5.01; Windows NT)");
	req.addHeader("Host", "api.aflatlang.com");
	req.addHeader("Accept-Language", "en-us");
	req.addHeader("Accept-Encoding", "gzip, deflate");
	req.addHeader("X-Powered-By", "AFLAT");
	req.addHeader("Content-Type", "application/json");
	req.addHeader("Connection", "Keep-Alive");

    let res = req.send(1000000);

    io.fPrint("", {res.body});

    let id = json.getString("id", res.body);
    let name = json.getString("name", res.body);
    let version = json.getString("version", res.body);
    let author = json.getString("author", res.body);

    if !(name == cname) {
        io.fPrint("Package not found\n");
        return NULL;
    };

    string body = getBodyFromID(id);

    if !(cunder == name) {
        io.fPrint("Renaming %s to %s\n", {name, cunder});
    };

    let package = Package(body, cunder);
    let updated = !package.install();

    io.fPrint("\rSuccessfully %a package: %s\n", {if updated "updated" else "installed" , cunder});
    io.fPrint("Package ID: %s\n", {id});
    io.fPrint("Package Name: %s\n", {name});
    io.fPrint("Package Version: %s\n", {version});
    io.fPrint("Package Author: %s\n", {author});

    return NULL;
};

int main(int argc, adr argv) {
    const adr[0] args = argv;

    if argc < 2 {
        io.fPrint("Usage: %a <args> <file>\n", {args[0]});
        return 1;
    };

    ArgsList argsList = ArgsList(argc, argv, {
        "h", "-help", // help
        "v", "-version", // version
        "i", "-install", // install
        "a", "-author", // author
        "u", "-under", // under
        NULL // must be NULL terminated
    });

    if argsList == NULL {
        io.fPrint("Usage: %a <args> <file>\n", {args[0]});
        io.fPrint("Try  `%a --help`  for more information\n", {args[0]});
        return 1;
    };

    if argsList.has("i") | argsList.has("-install") {
        mutable string package = argsList.getArg("i").value([] => {
            return new string("");
        });

        if package == "" {
            package = argsList.getArg("-install").value([] => {
                return new string("");
            });
        };

        mutable string version = "";
        mutable string author = "";
        mutable string u = "";
        u = package;

        if package == "" {
            io.fPrint("Usage: %s -i <package>\n", {argsList.progName});
            return 1;
        };

        if argsList.has("v") | argsList.has("-version") {
            version = argsList.getArg("v").value([] => {
                return new string("");
            });

            if version == "" {
                version = argsList.getArg("-version").value([] => {
                    return new string("");
                });
            };
        };

        if argsList.has("a") | argsList.has("-author") {
            author = argsList.getArg("a").value([] => {
                return "";
            });

            if author == "" {
                author = argsList.getArg("-author").value([] => {
                    return "";
                });
            };
        };

        if argsList.has("u") | argsList.has("-under") {
            u = argsList.getArg("u").value([] => {
                return "";
            });

            if u == "" {
                u = argsList.getArg("-under").value([] => {
                    return "";
                });
            };
        };

        PackageQuery query = new PackageQuery(package.cstr(), version.cstr(), author.cstr(), u.cstr());
        Result inst = installPackage(query);
        inst.get();
        return 0;

    };

    if argsList.has("v") | argsList.has("-version") {
        io.fPrint("Version: %a\n", {VERSION});
        return 0;
    };

    if argsList.has("h") | argsList.has("-help") {
        // print help
        io.fPrint("Usage: %s <args> <file>\n", {argsList.progName});
        io.fPrint("Args:\n");
        io.fPrint("    -h, --help: print this help\n");
        io.fPrint("    -v, --version: print version\n");
        io.fPrint("    -i, --install: install package\n");
        io.fPrint("        -a, --author: author of package\n");
        io.fPrint("        -u, --under: install package and save with a different name\n");
        io.fPrint("        -v, --version: version of package\n");
        io.fPrint("        eg: %s -i <package> -a <author> -u <under> -v <version>\n", {argsList.progName});
        io.fPrint("        eg: %s -i LoadingBar -a dthompson -u load -v 1.0.0\n", {argsList.progName});

        return 0;
    };
    return 0;
};