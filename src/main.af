.needs <std>
import string from "String";
import { print } from "String" under str;
import vector from "Collections/Vector";
import option from "Utils/option";
import { Some, None } from "Utils/option" under opt;
import result from "Utils/result";
import { accept, reject } from "Utils/result" under res;

types(T)
class Boxed {
    T value = value;
    fn init(T value) -> Self {
        return my;
    };

    fn toString() -> string {
        return `Boxed({my.value})`;
    };
};


fn main() -> int {
    let v = [
        new Boxed::<string>("Hello"),
        new Boxed::<string>("World"),
    ];

    foreach i in v {
        str.print(`Processing item: {i}\n`);
    };
    
    return 0;
};
