.needs <std>

import string, {print} from "String" under str;
import option, { some, none } from "Utils/option" under opt;
import vector from "Collections/vector";

types(A)
class TestClass {
    private A value = value;

    fn init(A value) -> Self {
        return my;
    };

    fn returnValue() -> A {
        return my.value;
    };
};

types(T)
fn print(T value) {
    str.print(`{value}\n`);
    return;
};

fn main() {
    let test = TestClass::<int>(12);
    let test2 = new TestClass::<string>("Hello");
    let v = test.returnValue();
    print(v);
    print(test2.returnValue());
    print("Can we do it twice? Yes, we can!");

    let someVal = opt.some::<int>(99);
    print(someVal.or(0));

    let numbers = new vector::<int>();
    numbers.pushBack(1);
    numbers.pushBack(2);
    print(numbers.get(0).or(0));
};
