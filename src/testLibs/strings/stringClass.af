.needs <std>

import {case, require} from "ATest.af" under test;
import TestSuite from "ATest.af";
import string from "String";
import { print, fString } from "String" under stl;
import {str_comp} from "strings" under st;
import List from "Collections";
import Product from "Utils/Product";

private bool test_compare() : test.case("compare") {
    let s1 = new string("Hello");
    return (
        test.require(s1 == "Hello", "s1 == Hello")
    );
};

private bool test_at() : test.case("at") {
    let s1 = new string("Hello");
    return (
        test.require(s1.at(0) == 'H', "s1.at(0) == 'H'") &
        test.require(s1.at(1) == 'e', "s1.at(1) == 'e'") &
        test.require(s1.at(2) == 'l', "s1.at(2) == 'l'") &
        test.require(s1.at(3) == 'l', "s1.at(3) == 'l'") &
        test.require(s1.at(4) == 'o', "s1.at(4) == 'o'")
    );
};

private bool test_cstr() : test.case("cstr") {
    let s1 = new string("Hello");
    return (
        test.require(st.str_comp(s1.cstr(), "Hello") == 1, "s1.cstr() == Hello")
    );
};

private bool test_concat() : test.case("concat") {
    let s1 = new string("Hello");
    let s2 = new string("World");
    return (
        test.require(s1 + s2 == "HelloWorld", "Hello + World == HelloWorld")
    );
};

private bool test_split() : test.case("split") {
    let s1 = new string("Hello World");
    let l1 = s1.split(' ');
    string part1 = l1.get(0);
    string part2 = l1.get(1);
    return (
        test.require(l1.getCount() == 2, "split gets the correct item count from split.") &
        test.require(part1 == "Hello", "split gets the correct first item.") &
        test.require(part2 == "World", "split gets the correct second item.")
    );
};

mutable int callCount = 0;

class Char {
    char c = c;
    Char init(char c) {
        return my;
    };
};

private bool test_forEach() : test.case("forEach") {
    callCount = 0;
    List chars = new List(Char);
    const let loopTracker = [char c, int __index, List list] => {
        callCount = callCount + 1;
        list.pushBack(new Char(c));
        return 0;
    };

    let s1 = new string("1234");
    s1.forEach(loopTracker, chars);

    Char c1 = chars.get(0);
    Char c2 = chars.get(1);
    Char c3 = chars.get(2);
    Char c4 = chars.get(3);

    return (
        test.require(callCount == 4, `Should have called the loop tracker 4 times. Called {callCount} times.`) &
        test.require(c1.c == '1', `The first char should be 1 got {c1.c}`) &
        test.require(c2.c == '2', `The second char should be 2 got {c2.c}`) &
        test.require(c3.c == '3', `The third char should be 3 got {c3.c}`) &
        test.require(c4.c == '4', `The fourth char should be 4 got {c4.c}`)
    );
};

private bool test_len() : test.case("len") {
    let s1 = new string("Hello");
    let s2 = new string("");
    return (
        test.require(s1.len() == 5, "s1.len() == 5") &
        test.require(s2.len() == 0, "s2.len() == 0")
    );
};

private bool test_copy() : test.case("copy") {
    let s1 = new string("Hello");
    let s2 = s1.copy();

    adr s1Addr = s1;
    adr s2Addr = s2;
    return (
        test.require(s1 == s2, "Both strings are equal.") &
        test.require(s1.cstr() != s2.cstr(), "Both strings do not point to the same buffer.") &
        test.require(s1Addr != s2Addr, "Both are not the same object.")
    );
};

private bool test_get() : test.case("get") {
    let s1 = new string("Hello");
    let s2 = s1.get();

    return (
        test.require(s1 == s2, "Both strings are equal.") &
        test.require(s1.cstr() == s2.cstr(), "Both strings point to the same buffer.") &
        test.require(s1.getRefcount() == 2, "get increases the refcount.")
    );
};

private bool test_isNumeric() : test.case("isNumeric") {
    let s1 = new string("1234");
    let s2 = new string("Hello");
    return (
        test.require(s1.isNumeric(), "Identifies numeric") &
        test.require(s2.isNumeric() == false, "Identifies non-numeric")
    );
};

private bool test_toInt() : test.case("toInt") {
    let s1 = new string("1234");
    let s2 = new string("Hello");

    Product s1 = s1.toInt();
    Product s2 = s2.toInt();
    return (
        test.require(s2.hasError(), "Identifies non-numeric") &
        test.require(s1.hasError() == false, "Identifies numeric") &
        test.require(s1.resolve([int result] => return result, NULL) == 1234, "Converts to int")
    );
};

private bool test_toLower() : test.case("toLower") {
    let s1 = new string("Hello");
    let s2 = s1.toLower();
    return (
        test.require(s2 == "hello", "Converts to lower case")
    );
};

private bool test_toUpper() : test.case("toUpper") {
    let s1 = new string("Hello");
    let s2 = s1.toUpper();
    return (
        test.require(s2 == "HELLO", "Converts to upper case")
    );
};

private bool test_Title() : test.case("Title") {
    let s1 = new string("hello world");
    let s2 = s1.title();
    return (
        test.require(s2 == "Hello World", "Converts to title case")
    );
};

private bool test_replaceChar() : test.case("replaceChar") {
    let s1 = new string("Hello World");
    let s2 = s1.replaceChar('o', 'a');
    return (
        test.require(s2 == "Hella Warld", "Replaces characters")
    );
};

private bool test_find() : test.case("find") {
    let s1 = new string("Hello World World");
    return (
        test.require(s1.find("World", 0) == 6, "Finds a string") &
        test.require(s1.find("Worlds", 0) == -1, "Does not find a string") &
        test.require(s1.find("World", 7) == 12, "Finds a string after a given index")
    );
};

private bool test_replace() : test.case("replace") {
    let s1 = new string("Hello World World");
    let s2 = s1.replace("World", "Universe");
    return (
        test.require(s2 == "Hello Universe Universe", "Replaces a string")
    );
};

private bool test_subString() : test.case("subString") {
    let s1 = new string("Hello World");
    let s2 = s1.subString(0, 5);
    return (
        test.require(s2 == "Hello", "Gets a substring")
    );
};

private bool test_trim() : test.case("trim") {
    let s1 = new string(" Hello World ");
    let s2 = new string("!!!!Hello World!!!!");
    return (
        test.require(s1.trim() == "Hello World", "Trims a string") &
        test.require(s2.trim('!') == "Hello World", "Trims a string with a given character")
    );
};

private bool test_indexOf() : test.case("indexOf") {
    let s1 = new string("Hello World");
    return (
        test.require(s1.indexOf('o') == 4, "Finds a character") &
        test.require(s1.indexOf('a') == -1, "Does not find a character")
    );
};

private bool test_push() : test.case("push") {
    let s1 = new string("Hello");
    let s2 = s1.push(' ');
    let s3 = s2.push('W');
    let s4 = s3.push('o');
    let s5 = s4.push('r');
    let s6 = s5.push('l');
    let s7 = s6.push('d');
    return (
        test.require(s7 == "Hello World", "Pushes a character")
    );
};

private bool test_fString() : test.case("fString") {
    let s1 = new string("Hello");
    let s2 = new string("World");
    let s3 = new string("Hello World");
    let s4 = stl.fString("%s %s %d%c", {s1, s2, 2, '!'});
    return (
        test.require(s4 == "Hello World 2!", "Formats a string")
    );
};

private bool test_sort() : test.case("sort") {
    let s1 = new string("Hello World");
    let expected = new string(" HWdellloor");
    let s2 = s1.sort();
    return (
        test.require(s2 == expected, `Could not sort a string {s2}`) &
        test.require(s2.len() == s1.len(), "Sorted string has the same length as the original")
    );
};

export TestSuite getSuite() {
    let suite = new TestSuite("string class");
    suite.addCase(test_compare);
    suite.addCase(test_at);
    suite.addCase(test_cstr);
    suite.addCase(test_concat);
    suite.addCase(test_split);
    suite.addCase(test_forEach);
    suite.addCase(test_len);
    suite.addCase(test_copy);
    suite.addCase(test_get);
    suite.addCase(test_isNumeric);
    suite.addCase(test_toInt);
    suite.addCase(test_toLower);
    suite.addCase(test_toUpper);
    suite.addCase(test_Title);
    suite.addCase(test_replaceChar);
    suite.addCase(test_find);
    suite.addCase(test_replace);
    suite.addCase(test_subString);
    suite.addCase(test_trim);
    suite.addCase(test_indexOf);
    suite.addCase(test_push);
    suite.addCase(test_fString);
    suite.addCase(test_sort);
    return suite;
};