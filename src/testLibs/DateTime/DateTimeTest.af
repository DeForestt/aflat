.needs <std>

import {case, require} from "ATest.af" under test;
import TestSuite from "ATest.af";
import string from "String";
import List from "Collections";
import Product from "Utils/Product";
import {print} from "String" under str;

import {mmddyyyyToDate, Now} from "DateTime" under dt;
import DateTime from "DateTime";

private bool test_mmddyyyyToDate() : test.case("mmddyyyyToDate") {
    let invalid = dt.mmddyyyyToDate("invalid");
    string errorCode = invalid.resolve(
        [] => return `valid`,
        [string error] => return error
    );
    str.print(errorCode);
    return (
        test.require(invalid.hasError(), "invalid date should return error") &
        test.require(errorCode == "Invalid date format", `error message should be 'Invalid date format', got '{errorCode}'`)
    );
};

export TestSuite getSuite() {
    let suite = new TestSuite("DateTime");

    suite.addCase(test_mmddyyyyToDate);    

    return suite;
};