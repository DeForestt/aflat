.needs <std>
import string from "String";

/*
A class that represents the result of a function.  It can either be error or success. and will return the value if it is success.
You will be sacrificing type safety for error handling.
*/
dynamic safe class Product {
	private mutable any value = value;
	private mutable bool success = error == NULL;
	private mutable adr error = error;
	private mutable int refcount = 1;

	public Product init(const any value, *const adr error) {
		return my;
	};

	public any resolve(const adr accept, const adr reject, * const any arg) {
		if my.success
			return accept(my.value, arg)
		else
			return reject(new string(my.error), arg);
	};

	public bool hasError() {
		return my.success == true;
	};

	int endScope() {
        my.refcount = my.refcount - 1;
        if my.refcount == 0 {
            delete my;
        };
        return 0;
    };

	Product get() {
		my.refcount = my.refcount + 1;
		return my;
	};
};

export Product accept(const any value) {
	return new Product(value, NULL);
};

export Product reject(const string error) {
	return new Product(NULL, error.cstr());
};