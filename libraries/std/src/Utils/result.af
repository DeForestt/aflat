.needs <std>
import string from "String";
import {print} from "String" under str;

types(T)
union result {
    Ok(T),
    Err(adr)

    safe fn expect(const string msg) -> T {
        match my {
            Ok(value) => return value,
            Err(err) => {
                panic(`Error: {err}. {msg}`);
            }
        };
    };

    safe fn isOk() -> bool {
        match my {
            Ok() => return true,
            Err() => return false
        };
    };

    safe fn isErr() -> bool {
        match my {
            Ok() => return false,
            Err() => return true
        };
    };

    safe fn toString() -> string {
        match my {
            Ok(value) => return `Ok({value})`,
            Err(err) => return `Err({err})`
        }
    };
};

types(T)
export fn accept(const T value) -> result::<T> {
    return new result::<T>->Ok(value);
};

types(T)
export fn reject(const adr err) -> result::<T> {
    return new result::<T>->Err(err);
};

types(T)
export fn resultWrapper(const T value) -> result::<T> {
    return new result::<T>->Ok(value);
};