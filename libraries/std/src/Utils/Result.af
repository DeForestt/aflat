.needs <std>
import string from "String";
import Function from "Utils/Functions";
import Computed from "Utils/Properties";
import Option from "Utils/Option";
import Error from "Utils/Error";
import Map from "Utils/Map";


/*
A class that represents the result of a function.  It can either be error or success. and will return the value if it is success.
You will be sacrificing type safety for error handling.
*/
dynamic safe pedantic class Result {
	private mutable any value = value;
	private mutable bool success = error == NULL;
	private mutable Error error = error;
	private mutable int refcount = 1;

	Result get() {
		my.refcount = my.refcount + 1;
		return my;
	};

	public Result init(const any value, *const Error error) {
		return my;
	};

	public any resolve(const Function acc, const Function rej, * const any arg, * const any arg2) {
		if my.success
			return acc(my.value, arg, arg2)
		else
			return rej(my.error, arg, arg2);
	};

	public any value(const Function onError, * const any arg) {
		if my.success
			return my.value
		else
			return onError(my.error, arg);
	};

	public any expect(const string message) {
		if my.success
			return my.value
		else
			panic(message.cstr());
	};

	public Error getError() {
		return my.error;
	};

	public bool hasError() {
		return my.success != true;
	};

	void endScope() {
        my.refcount = my.refcount - 1;
        if my.refcount == 0 {
            delete my;
        };
        return;
    };

	any match(const Map cases, *const any arg1, *const any arg2, *const any arg3, *const any arg4) {
		if my.success {
			if cases.has("ok") {
				const adr foo = cases.get("ok").orElse(
					fn () panic("No case for ok")
				);
				return foo(my.value, arg1, arg2, arg3, arg4);
			} else {
				panic("No case for ok");
			};
		};

		return my.error.match(cases, arg1, arg2, arg3, arg4);
	};
};

export Result accept(const any value) {
	return new Result(value);
};

export Result reject(const Error error) {
	return new Result(NULL, error);
};