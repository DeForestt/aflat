.needs <std>
import string from "String";
import Function from "Utils/Functions";
import Computed from "Utils/Properties";
import Error from "Utils/Error";


/*
A class that represents the result of a function.  It can either be error or success. and will return the value if it is success.
You will be sacrificing type safety for error handling.
*/
dynamic safe padantic class Result {
	private mutable any value = value;
	private mutable bool success = error == NULL;
	private mutable string error = if error == NULL `No error.` else new string(error);
	private mutable int refcount = 1;

	Result get() {
		my.refcount = my.refcount + 1;
		return my;
	};

	public Result init(const any value, *const adr error) {
		return my;
	};

	public any resolve(const Function acc, const Function rej, * const any arg, * const any arg2) {
		if my.success
			return acc(my.value, arg, arg2)
		else
			return rej(my.error, arg, arg2);
	};

	public any value(const Function onError, * const any arg) {
		if my.success
			return my.value
		else
			return onError(my.error.copy(), arg);
	};

	public any expect(const string message) {
		if my.success
			return my.value
		else
			panic(message.cstr());
	};

	public string getError() {
		if my.success
			return `No error.`
		else
			return my.error.copy();
	};

	public bool hasError() {
		return my.success != true;
	};

	void endScope() {
        my.refcount = my.refcount - 1;
        if my.refcount == 0 {
            delete my;
        };
        return;
    };
};

export Result accept(const any value) {
	return new Result(value, NULL);
};

export Result reject(const string error) {
	return new Result(NULL, error.cstr());
};