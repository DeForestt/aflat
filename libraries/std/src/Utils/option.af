.needs <std>
import {print} from "String" under str;
import string from "String" under str;

types(T)
union option {
  Some(T),
  None

  safe fn isSome() -> bool {
    match my {
      Some() => return true,
      None() => return false
    };
  };

  safe fn isNone() -> bool {
    match my {
      Some() => return false,
      None() => return true
    };
  };

  safe fn expect(const string msg) -> T {
    match my {
      Some(value) => return value,
      None() => {
        panic(msg.cstr());
      }
    };
  };

  safe fn or(const T defaultValue) -> T {
    match my {
      Some(value) => return value,
      None() => return defaultValue
    };
  };

  safe fn toString() -> string {
    match my {
      Some(value) => return `Some({value})`,
      None() => return "None"
    }
  }
};

types(T)
export fn Some(const T val) -> option::<T> {
  return new option::<T>->Some(val);
};

types(T)
export fn None() -> option::<T> {
  return new option::<T>->None();
};

types(T)
export fn optionWrapper(immutable T value) -> option::<T> {
  const any checker = value; // Note: This is a workaround for the type system to allow checking for NULL even if T is not an 8-byte type.
  // 0, false, and \0 are not considered NULL in this context.
  // If T is a reference type, this will check if the reference is NULL.
  if (checker == NULL) {
    return new option::<T>->None();
  } else {
    return new option::<T>->Some(value);
  }
};