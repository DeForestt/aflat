.needs <std>
import string from "String";
import {print} from "String" under str;
import List from "Collections";
import {str_at, len, str_comp} from "strings" under st;

class MapNode {
    mutable private MapNode left = NULL;
    mutable private MapNode right = NULL;
    mutable private any data = data;
    
    const private string key = key;
    const int hashVal = my.hash(key);

    public int hash(const adr key) {
        // string hash algorithm
        int hash = 0;
        for int i = 0; i < st.len(key); i++ {
            hash = (hash * 31) + st.str_at(key, i);
        };
        return hash;
    };


    public MapNode init(const adr key, const any data) {
        return my;
    };

    public bool input(const adr key, const any data) {
        if my.key == key {
            my.data = data;
            return true;
        };
        
        const let newNode = new MapNode(key, data);

        if my.hashVal < newNode.hashVal {
            if my.right == NULL {
                my.right = newNode;
                return true;
            } else {
                return my.right.input(key, data);
            };
        } else {
            if my.left == NULL {
                my.left = newNode;
                return true;
            } else {
                return my.left.input(key, data);
            };
        };
    };

    public int normalize() {
        if my.left != NULL my.left.normalize();
        if my.right != NULL my.right.normalize();

        if my.left != NULL {
            if my.left.right != NULL {
                const MapNode temp = my.left.right;
                my.left.right = NULL;
                my.left = temp;
            };
        };

        if my.right != NULL {
            if my.right.left != NULL {
                const MapNode temp = my.right.left;
                my.right.left = NULL;
                my.right = temp;
            };
        };

        return 0;
    };

    private any bruteGet(const adr key) {
        if my.key == key {
            return my.data;
        };

        if my.left != NULL {
            const any left = my.left.bruteGet(key);
            if left != NULL {
                return left;
            };
        };

        if my.right != NULL {
            const any right = my.right.bruteGet(key);
            if right != NULL {
                return right;
            };
        };

        str.print("Key not found: \n");
        return NULL;
    };

    public any get(const adr key) {
        if my.key == key {
            return my.data;
        };

        if my.hash(my.key.cstr()) < my.hash(key) {
            if my.right != NULL {
                return my.right.get(key);
            };
        } else {
            if my.left != NULL {
                return my.left.get(key);
            };
        };

        return my.bruteGet(key);
    };

    public List keys() {
        const List keys = new List(adr);
        keys.pushBack(my.key.cstr());
        if my.left != NULL {
            keys.stitch(my.left.keys());
        };
        if my.right != NULL {
            keys.stitch(my.right.keys());
        };
        keys.stringFunc = [const adr val] => return new string(val);
        return keys;
    };
};

class Map {
    private mutable MapNode root = NULL;

    public Map init(* const adr data) {
        if data == NULL {
            return my;
        };


        mutable int i = 0;
        mutable adr pointer = data;
        while pointer as adr != NULL {
            const let key = pointer as adr;
            pointer = pointer + adr;
            const let value = pointer as adr;
            pointer = pointer +  adr;
            if i == 0 {
                my.root = new MapNode(key, value);
            } else {
                my.root.input(key, value);
            };
            i++;
        };

        return my;
    };

    bool set(const adr key, const any data) {
        bool success = false;
        if my.root == NULL {
            my.root = new MapNode(key, data);
            return true;
        } else {
            success = my.root.input(key, data);
        };
        my.root.normalize();
        return success;
    };

    any get(const adr key) {
        if my.root == NULL {
            return NULL;
        } else {
            my.root.normalize();
            return my.root.get(key);
        };
    };

    any _call(const adr key) {
        return my.get(key);
    };

    List keys() {
        if my.root == NULL {
            return new List(adr);
        } else {
            return my.root.keys();
        };
    };

    bool has(const adr key) {
        return my.get(key) != NULL;
    };
};
