.needs <std>
import Map from "Utils/Map";
import {print, printHex} from "io" under io;

/*
 * Decorate a class method to be treated as a read-only calculated property.
 */
safe dynamic class Computed {
    private const any<any> foo = foo;
    private const any context = context;

    Computed init(const any<any> foo, const any context){
        const int __i = 0;
        return my;
    };

    any get() {
        const let foo = my.foo;
        return foo(my.context);
    };
};


/*
 * Decorate a class method to be treated as a read-write calculated property.
 */
safe dynamic class Property {
    private mutable any<any> getter;
    private mutable void<any, any> setter;
    private const any context = context;

    Property init(const Map<> foo, const any context){
        const Map access = foo();
        my.getter = access.get("get");
        my.setter = access.get("set");
        return my;
    };

    any get() {
        const let getter = my.getter;
        if (getter == NULL) panic("Attempt to read from a property without a getter.");
        return getter(my.context);
    };

    void _set(const any value) {
        const let setter = my.setter;
        if (setter == NULL) panic("Attempt to write to a property without a setter.");
        setter(my.context, value);
    };

    adr ref() {
        return my;
    };
};