.needs "/std/head/io.gs"
.needs "/std/head/math.gs"

char ascii(int input){
	adr caster = ?input;
	return caster as char;
};

int len(adr input){
	char null = ascii(0);
    int i = 0;
	while(input as char != null ){
        i = i + 1;
		input = input + 1;
	};
	return i;
};

int str_comp(adr str1, adr str2){
        int len1 = len(str1);
        int len2 = len(str2);

        if(len1 != len2){ return 0; };

        int i = 0;

        while(i < len1){
                i = i + 1;
                char ch1 = str1 as char;
                char ch2 = str2 as char;
                if (ch1 != ch2){return 0;};
                str2 = str2 + 1;
                str1 = str1 + 1;
        };

        return 1;
};

int str_concat(adr str1, adr str2, adr pointer){
    char null = ascii(0);
    char loader;
    while(str1 as char != null){
        loader = str1 as char;
        pointer =: loader;
        str1 = str1 + 1;
        pointer = pointer + 1;
    };

    while(str2 as char != null){
        loader = str2 as char;
        pointer =: loader;
        str2 = str2 + 1;
        pointer = pointer + 1;
    };

    pointer =: null;

    return 0;
};

int str_toInt(adr input){
    int mul = 1;
    char ch1 = input as char;
    if(ch1 == '-'){
        mul = -1;
        input = input + #1;
    };
    
    char null = ascii(0);
    int factor;
    int size = len(input);
    int result = 0;
    int i = size - 1;
    while(i > -1){
        factor = exp(10, i);
        char ch2 = input as char;
        int num = toInt(ch2);
        factor = factor * num;
        result = result + factor;
        i = i - 1;
        input = input + 1;
    };
    result = result * mul;
    return result;
};

int str_find(char find, adr in){
    int i = 0;
    int len = len(in);
    while(i < len){
        adr h = in + i;
        if(h as char == find){return i};
        i = i + 1;
    };
    return -1;
};

/*
 * Function name: str_split
 * Description:   Splits a string into an array of strings
 * Arguments:     str - the string to split
 *                sep - the separator
 * 			      buff1 - buffer for the first part of the split
 *                buff2 - buffer for the second part of the split
 * Returns:       0 on success, -1 on failure
 */
int str_split(adr str, char sep, adr buff1, adr buff2){
	char null = ascii(0);
	char check = str as char;

	while(check != sep){
		if (check == null){
			return -1;
		};

		if (check != sep){
			buff1 =: check;
		};
		str = str + 1;
		buff1 = buff1 + 1;
		check = str as char;
	};
    buff1 =: null;
	
	str = str + 1;
	if (str as char == null){
		return -1;
	};
	str_concat("", str, buff2);
	return 0;
};