.needs <std>
.needs <std>
import string from "String";
import result from "Utils/result";
import option from "Utils/option";
import vector from "Collections/Vector";
import unordered_map from "Collections/unordered_map";
import {Some, None, optionWrapper} from "Utils/option" under opt;
import {accept, reject, resultWrapper} from "Utils/result" under res;
import {print} from "String" under str;
import Box from "Memory";
import Error from "Utils/Error";

union JSON {
    String(adr),
    Number(int),
    Boolean(bool),
    List(vector::<Box::<JSON>>),
    Object(unordered_map::<Box::<JSON>>),
    Null

    fn get(const string key) -> JSON? {
        match my {
            Object(map) => {
                match map.get(key.cstr()) {
                    Some(value) => return value.get(), // unwrap the Box
                    None => return NULL // null will become None
                }
            },
            _ => return NULL,
        };
    }

    fn asString() -> adr! {
        match my {
            String(s) => return s,
            _ => return new Error("JSON is not a String")           
        }
    };

    fn asNumber() -> int! {
        match my {
            Number(n) => return n,
            _ => return new Error("JSON is not a Number")
        }
    };

    fn asBoolean() -> bool! {
        match my {
            Boolean(b) => return b,
            _ => return new Error("JSON is not a Boolean")
        }
    };

    fn isNull() -> bool {
        match my {
            Null => return true,
            _ => return false
        }
    };

    fn toString() -> string {
        match my {
            String(s) => return `String({s})`,
            Number(n) => return `Number({n})`,
            Boolean(b) => return `Boolean({b})`,
            List(list) => return `List({list})`,
            Object(map) => return `Object({map})`,
            Null => return "Null"
        };
    };

    private fn wrap(const string s, const char c1, const char c2) -> string {
        return `{c1}{s}{c2}`;
    };

    fn stringify() -> string {
        match my {
            String(s) => return my.wrap(s, '"', '"'),
            Number(n) => return `{n}`,
            Boolean(b) => return `{b}`,
            List(list) => {
                mutable let builder = `[{list.next()}`;
                foreach item in list {
                    const let item = item.get(); // unwrap the Box
                    builder =  `{builder}, {item.stringify()}`;
                };
                return `{builder}]`;
            },
            Object(map) => {
                mutable string builder = "";
                let first = true;
                
                const let keys = map.keys();
                foreach key in keys {
                    const let value = map.get(key).expect(`Value {key} should be present`);
                    // value is a Box, so we need to unwrap it
                    const let value = value.get();
                    const let wrapKey = my.wrap(key, '"', '"');
                    builder = `{builder}{wrapKey}: `;
                    builder = builder + value.stringify();
                    if first {
                        first = false;
                    } else {
                        builder = builder + ", ";
                    };
                };
                return my.wrap(builder, '{', '}');
            },
            Null => return `null`
        }
    };
};

export fn Object(const unordered_map::<Box::<JSON>> map) -> JSON {
    return new JSON->Object(map);
};

export fn String(const adr s) -> JSON {
    return new JSON->String(s);
};

export fn Number(const int n) -> JSON {
    return new JSON->Number(n);
};

export fn Boolean(const bool b) -> JSON {
    return new JSON->Boolean(b);
};

export fn List(const vector::<Box::<JSON>> list) -> JSON {
    return new JSON->List(list);
};

export fn Null() -> JSON {
    return new JSON->Null();
};