.needs <std>
.needs <std>
import string from "String";
import result from "Utils/result";
import option from "Utils/option";
import vector from "Collections/Vector";
import unordered_map from "Collections/unordered_map";
import {Some, None} from "Utils/option" under opt;
import {accept, reject} from "Utils/result" under res;
import Box from "Memory";


union JSON {
    String(string),
    Number(int),
    Boolean(bool),
    List(vector::<Box::<JSON>>),
    Object(unordered_map::<Box::<JSON>>)
};

fn Object(const unordered_map::<Box::<JSON>> map) -> JSON {
    return new JSON->Object(map);
};

fn String(const string s) -> JSON {
    return new JSON->String(s);
};

fn Number(const int n) -> JSON {
    return new JSON->Number(n);
};

fn Boolean(const bool b) -> JSON {
    return new JSON->Boolean(b);
};