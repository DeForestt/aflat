.needs <asm>
.needs <std>

import {len, int_toStringL0, str_toInt} from "strings" under str;
import String from "String.af";
import * from "io" under io;

class Thread {
    contract {
        private int pid;
    };
    int getPid();
};

class Process signs Thread {
    private adr foo;

    Process init(adr foo);
    int start(* adr args);
    bool isRunning();
};

class Pipe {
    int in;
    int out;
    int write(adr buf, int len);
    int read(adr buf, int len);
    Pipe init();
};

class Message{
    int len;
    adr body;

    public Message init(adr body);
    public int writePipe(Pipe pipe);
    private Message copy<<=>>(Message msg);
};

class MProcess signs Thread {
    private adr foo;
    private Pipe inbox;
    private Pipe outbox;

    public MProcess init(adr foo);
    int start(* adr args);
    private Process copy<<=>>();
    public bool input(adr message);
    public adr output();
    public int kill(){
        sys_kill(my.pid, 2);
    };
};

class FD {
  public int out;
  public int in;
};

class Result{
    private MProcess p = p;

    Result init(const MProcess p){
        return my;
    };

    public adr get() {
        return my.p.output();
    };

    public adr then(const adr func, * const any arg1, * const any arg2, * const any arg3, * const any arg4) {
        const adr res = my.p.output();
        return func(res, arg1, arg2, arg3, arg4);
    };

    public int kill() {
        return my.p.kill();
    };

    public int timeout(const int time, *const int nano) {
        // create a new process that waits for time and then kills the process

        const Process timeout = Process([const adr args]=>{
            const int[3] arg = args;
            sleep(arg[0], arg[1]);        
            if sys_kill(arg[2], 2) == 0 {
                io.print("timeout: killed process");
            };
            sys_exit(0);
        });
        const int[3] arg = {time, nano, my.p.getPid()};
        timeout.start(arg);
        return 0;
    };
};

class WorkArgs {
    public adr func = bar;
    public adr arg1 = arg1;
    public adr arg2 = arg2;
    public adr arg3 = arg3;
    public adr arg4 = arg4;

    WorkArgs init(const adr bar, *const adr arg1, *const adr arg2, *const adr arg3, *const adr arg4){
        return my;
    };

    adr run() {
        const adr func = my.func;
        return func(my.arg1, my.arg2, my.arg3, my.arg4);
    };
};

Message init@Message(const adr body){
    my.len = blockSize(body);
    my.body = body;
};

Process init@Process(const adr bar){
    my.foo = bar;
    my.pid = 0;
};

MProcess init@MProcess(const adr bar){
    my.foo = bar;
    my.pid = 0;
    my.inbox = new Pipe();
    my.outbox = new Pipe();
};

int start@Process(const adr args){
    my.pid = sys_fork();
    const adr bar = my.foo;
    if(my.pid == 0){
        bar(args);
        sys_exit(0);
    };
    return 0;
};

int start@MProcess(const adr args){
    my.pid = sys_fork();
    const adr bar = my.foo;
    if my.pid == 0 {
        bar(args, my.inbox, my.outbox);
        sys_exit(0);
    };
    return 0;
};

int getPid@Thread(){
    return my.pid;
};

bool isRunning@Process(){
    const int status = sys_kill(my.pid, 0); // 0 means no signal
    return status >= 0;
};

bool input@MProcess(const adr message){
    const Message m = Message(message);
    const Pipe pipe = my.inbox;

    const adr header = malloc(5);
    str.int_toStringL0(m.len, header, 5);
    pipe.write(header, 5);
    pipe.write(m.body, m.len);
    free(header);

    return true;
};

adr output@MProcess(){
    const Pipe outbox = my.outbox;

    // read header message from pipe
    const adr header = malloc(5);
    outbox.read(header, 5);
    const int mlen = str.str_toInt(header);
    free(header);

    // read body from pipe
    const adr mbody = malloc(mlen + 1);
    const adr pbody = mbody + mlen;
    pbody =: '\0';
    outbox.read(mbody, mlen);

    return mbody;
};

export Message readPipe(const Pipe pipe){
    const adr header = malloc(5);
    pipe.read(header, 5);
    const int mlen = str.str_toInt(header);
    free(header);

    // read body from pipe
    adr mbody = malloc(mlen + 1);

    pipe.read(mbody, mlen);
    const Message m = Message(mbody);
    mbody = mbody + mlen;
    mbody =: '\0';
    return m;
};

int writePipe@Message(const Pipe pipe){
    const adr header = malloc(5);
    str.int_toStringL0(my.len, header, 5);
    pipe.write(header, 5);
    pipe.write(my.body, my.len);
    free(header);
    return 0;
};

Pipe init@Pipe(){
    const FD fd = FD();
    sys_pipe(fd);
    my.out = fd.out;
    my.in = fd.in;
};

int read@Pipe(const adr buf, const int size){
    const int fd = my.out;
    const int ret = sys_read(fd, buf, size);
    return ret;
};

int write@Pipe(const adr buf, const int size){
    const int fd = my.in;
    const int ret = sys_write(fd, buf, size);
    return ret;
};

export int exit(const int status){
    sys_exit(status);
    return 0;
};

export int wait(const Thread p){
    sys_wait(p.getPid(), NULL, 0, NULL);
    return 0;
};

// Start a function as a concurrent process
export adr worker(const adr foo, *const adr arg1, *const adr arg2, *const adr arg3, *const adr arg4) {
    
    const MProcess p = new MProcess([const WorkArgs args, const Pipe __inbox, const Pipe outbox] => {
        const adr res = args.run();
        const Message msg = new Message(res);
        msg.writePipe(outbox);
    });
    const Result ret = new Result(p);
    const WorkArgs pArgs = new WorkArgs(foo, arg1, arg2, arg3, arg4);
    p.start(pArgs);
    return ret; 
};

export adr makeShared(const int size, * const adr constructor) {
    const adr val = mmap(NULL, size, 1 | 2, 1 | 32, -1, 0);
    if constructor !== NULL constructor(val);
    return val;
};
