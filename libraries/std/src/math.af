.needs <std.gs>

import DateTime from "DateTime.af";
import {Now} from "DateTime" under dt;
import {hex_toInt} from "strings" under str;
import * from "io" under io;

export int exp(int base, int pow);

class Random {
	private int seed;

	int nextInt(const int n){
		my.seed = (my.seed + 910230123);
		int result = my.seed;
		if result < 0
		 	result = result  * -1;
		return result % n;
	};

	Random init(){
		const DateTime now = dt.Now();
		my.seed = now.getSeconds();

		delete now;
		for int i = 0; i < my.nextInt(10); i++
			my.nextInt(100);
	};
};

export int exp(const int base, const int pow){
	int i = 0;
	int output = 1;
	while (i < pow){
		output = output * base;
		i = i + 1;
	};
	return output;
};

export int floatToInt(const adr f){
	int i = f as int;
	const int sign = i >> 31;
	i = f as int;
	int exponent = (i >> 23) & 255;
	int mantissa = i & 8388607;

	if exponent == 0 {
		exponent = 1;
		const int man = mantissa << 1;
		mantissa = man;
	} else {
		exponent = exponent - 127;
		mantissa = mantissa | 8388608;
	};

	int whole = mantissa >> (23 - exponent);
	if sign == 1
		whole = whole * -1;
	return whole;
};

export int sqrt(const int n){
	int i = 0;
	while (i * i < n)
		i = i + 1;
	return i;
};

export long longExp(const long base, const int pow){
	int i = 0;
	long output = 1;
	while (i < pow){
		output = output * base;
		i = i + 1;
	};
	return output;
};

export int longDiv(const int int1, const int int2){
	int remainder = int1 % int2;
	remainder = remainder * 10;
	remainder = remainder / int2;
	return remainder;
};

export int abs(const int input){
	if input < 0
		return input * -1;
	return input;
};

export float floatExp(const float base, const int pow){
	int i = 0;
	let output = 1.0;
	while (i < pow){
		output = output * base;
		i = i + 1;
	};
	return output;
};

export float floatAbs(const float input){
	if input < 0.0
		return input * -1.0;
	return input;
};

// Newton's method for square root
export float floatSqrt(const float n){
	const let l = 0.00001;
	let x = n;
	int count = 0;

	while (count < 100){
		count++;
		const let root = 0.5 * (x + (n / x));
		if (floatAbs(root - x) < l)
			return root;
		x = root; 
	};
	return x;
};
