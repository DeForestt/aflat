.needs <std>
.needs <asm>
.needs <request>

import result from "Utils/result";
import option from "Utils/option";
import {accept, reject, resultWrapper} from "Utils/result" under res;
import {Some, None, optionWrapper} from "Utils/option" under opt;
import Map from "Utils/Map";
import string from "String";
import Error from "Utils/Error";
import Result from "Utils/Result";
import {len, int_toString} from "strings" under str;
import {print, printInt, fPrint, printHex} from "io" under io;
import {worker} from "concurrency" under async;
import {fString, print} from "String" under st;
import vector from "Collections/Vector";

class NotFoundError signs Error {
    // 404 Not Found
    const string message = message.copy();

    string stdErrorMessage() : Render {
        return `{my.message}`;
    };

    NotFoundError init(const string message) {
        return my;
    };
};

class ForbiddenError signs Error {
    // 403 Forbidden
    const string message = message.copy();

    string stdErrorMessage() : Render {
        return `{my.message}`;
    };

    ForbiddenError init(const string message) {
        return my;
    };
};

class BadRequestError signs Error {
    // 400 Bad Request
    const string message = message.copy();

    string stdErrorMessage() : Render {
        return `{my.message}`;
    };

    BadRequestError init(const string message) {
        return my;
    };
};

class NotImplementedError signs Error {
    // 501 Not Implemented
    const string message = message.copy();

    string stdErrorMessage() : Render {
        return `{my.message}`;
    };

    NotImplementedError init(const string message) {
        return my;
    };
};

class InternalServerError signs Error {
    // 500 Internal Server Error
    const string message = message.copy();

    string stdErrorMessage() : Render {
        return `{my.message}`;
    };

    InternalServerError init(const string message) {
        return my;
    };
};

class OtherHTTPError signs Error {
    // Other HTTP Error
    const adr message = message.copy().cstr();
    const adr code = code.copy().cstr();

    string stdErrorMessage() : Render {
        return `{my.message}`;
    };

    OtherHTTPError init(const string message, const string code) {
        return my;
    };
};

enum HTTPMethod {
    GET,
    POST,
    PUT,
    DELETE,
    HEAD,
    OPTIONS,
    TRACE,
    CONNECT,
    PATCH
};

export adr listen(const short port, const int bufferSize, const adr callback, const adr args) {
    _aflat_server_spinUp(port, bufferSize, callback, args);
};

export string methodToString(const HTTPMethod method) {
    if method == HTTPMethod.GET 
        return `GET`
    else if method == HTTPMethod.POST
        return `POST`
    else if method == HTTPMethod.PUT
        return `PUT`
    else if method == HTTPMethod.DELETE
        return `DELETE`
    else if method == HTTPMethod.HEAD
        return `HEAD`
    else if method == HTTPMethod.OPTIONS
        return `OPTIONS`
    else if method == HTTPMethod.TRACE
        return `TRACE`
    else if method == HTTPMethod.CONNECT
        return `CONNECT`
    else
        return `UNKNOWN`;
};

export HTTPMethod stringToMethod(const string method) {
    if method == "GET"
        return HTTPMethod.GET
    else if method == "POST"
        return HTTPMethod.POST
    else if method == "PUT"
        return HTTPMethod.PUT
    else if method == "DELETE"
        return HTTPMethod.DELETE
    else if method == "HEAD"
        return HTTPMethod.HEAD
    else if method == "OPTIONS"
        return HTTPMethod.OPTIONS
    else if method == "TRACE"
        return HTTPMethod.TRACE
    else if method == "CONNECT"
        return HTTPMethod.CONNECT
    else if method == "PATCH"
        return HTTPMethod.PATCH 
    else
        return HTTPMethod.GET;
};

class HTTPHeader {
    const adr key = key;
    const adr value = value;

    HTTPHeader init(const adr key, const adr value) {
        return my;
    };

    fn toString() -> string {
        return `{my.key}: {my.value}`;
    };
};

class HTTPMessage {
    const private vector::<HTTPHeader> headers = new vector::<HTTPHeader>();
    private bool switch = false;
    const public Map query = new Map();
    string origin = new string("");
    string body = new string("");
    string version;
    string statusCode;
    string endpoint = "";
    string statusMessage;
    HTTPMethod method;
    Map metadata = new Map();
    private int parse(const adr rsi) {
        const string rsp = new string(rsi);
        my.origin = rsp;

        const let lines = rsp.split('\r');
        const string firstLine = lines.get(0).expect("Invalid HTTP message");
        firstLine.trim();
        const let firstLineParts = firstLine.split(' ');

        if (firstLineParts.count() < 3) {
            return -1;
        };
        my.version = firstLineParts.get(0).expect("Invalid HTTP message");
        my.statusCode = firstLineParts.get(1).expect("Invalid HTTP message");
        my.statusMessage = firstLineParts.get(2).expect("Invalid HTTP message");

        for int i = 3; i < firstLineParts.count(); i++ {
            my.statusMessage = st.fString("%s %s", {my.statusMessage, firstLineParts.get(i)});
        };

        my.switch = false;
        
        for int i = 0; i < lines.count(); i = i + 1 {
            const string line = lines.get(i).expect("Invalid HTTP message");
            if line == "\n" {
                my.switch = true;
                continue;
            };
            
            if i == 0
                continue;

            if my.switch {
                my.body = my.body + line + "\r\n";
                continue;
            };

            const let sections = line.split(':');
            if sections.count() < 2 {
                continue;
            };

            string key = sections.get(0).expect("Invalid HTTP message");
            string value = sections.get(1).expect("Invalid HTTP message");

            if sections.count() > 2 {
                for int j = 2; j < sections.count(); j = j + 1 {
                    value = value + ":";
                    const string t = sections.get(j).expect("Invalid HTTP message");
                    value = value + t;
                };
            };
            key = key.trim();
            value = value.trim();
            const HTTPHeader n = new HTTPHeader(key.cstr(), value.cstr());
            my.headers.push_back($n);
        };
        return 0;
    };

    private void updateMap(const string mq) {
        const string key = mq.subString(0, mq.indexOf('='));
        const string value = if mq.indexOf('&') == -1
            mq.subString(mq.indexOf('=') + 1, mq.len())
        else
            mq.subString(mq.indexOf('=') + 1, mq.indexOf('&'));

        const let valptr = malloc(str.len(value) + 1);
        memcpy(valptr, value.cstr(), str.len(value.cstr()) + 1);
        const let endPointer = valptr + str.len(value.cstr());
        endPointer =: '\0';
        my.query.set(key.cstr(), valptr);
    };

    private void updateQueryMap(const string qstring){
        string mq = qstring;
        let cont = true;
        while cont {
            if mq.indexOf('=') == -1 {
                cont = false;
                break;
            };
            
            my.updateMap(mq);
            if mq.indexOf('&') == -1 {
                cont = false;
            } else {
                mq = mq.subString(mq.indexOf('&') + 1, mq.len());
            };
        };
    };

    private void parseReq(const adr rsi) {
        const string rsp = new string(rsi);
        my.origin = rsp;

        const let lines = rsp.split('\r');
        const string firstLine = lines.get(0).expect("Invalid HTTP message");
        // firstLine.trim();
        const let firstLineParts = firstLine.split(' ');

        if firstLineParts.count() < 3 {            
            return;
        };

        const string method = firstLineParts.get(0).expect("Invalid HTTP message");
        my.endpoint = firstLineParts.get(1).expect("Invalid HTTP message");
        my.version = firstLineParts.get(2).expect("Invalid HTTP message");
        my.method = stringToMethod(method);

        if my.endpoint.indexOf('?') != -1 {
            const string query = my.endpoint.subString(my.endpoint.indexOf('?') + 1, my.endpoint.len());
            my.endpoint = my.endpoint.subString(0, my.endpoint.indexOf('?'));
            my.updateQueryMap(query);
        };

        my.switch = false;

        for int i = 0; i < lines.count(); i = i + 1 {
            const string line = lines.get(i).expect("Invalid HTTP message");
            if line == "\n" {
                my.switch = true;
                continue;
            };
            
            if i == 0
                continue;

            if my.switch {
                my.body = my.body + line + "\r\n";
                continue;
            };

            const let sections = line.split(':');
            if sections.count() < 2 {
                continue;
            };

            string key = sections.get(0).expect("Invalid HTTP message");
            string value = sections.get(1).expect("Invalid HTTP message");

            if sections.count() > 2 {
                for int j = 2; j < sections.count(); j = j + 1 {
                    value = value + ":";
                    const string t = sections.get(j).expect("Invalid HTTP message");
                    value = value + t;
                };
            };
            key = key.trim();
            value = value.trim();
            const HTTPHeader n = new HTTPHeader(key.cstr(), value.cstr());
            my.headers.push_back($n);
        };
        return;
    };

    HTTPMessage init(const adr rsp, * const bool isReq) {
        if isReq my.parseReq(rsp) else my.parse(rsp);
    };

    adr getHeader(const adr key) {
        const adr args = malloc(adr);
        
        for int i = 0; i < my.headers.count(); i = i + 1 {
            const HTTPHeader header = my.headers.get(i).expect("Get header failed");
            const adr comp = header.key;
            mutable string a = new string(header.key);
            a = a.trim('\n');
            a = a.trim('\r');
            a = a.trim(' ');
            if a == comp {
                return header.value;
            };
            delete a;
        };
        
        args =: key;
        const adr ret = args as adr;
        return ret;
    };
};

class HTTPRequest {
    private HTTPMethod method = method;
    private adr host;
    private adr endpoint;
    const private vector::<HTTPHeader> headers = new vector::<HTTPHeader>();
    private adr body = "\r\n";

    HTTPRequest init(const HTTPMethod method) {
        my.host = "";
        my.endpoint = "/";
        return my;
    };

    int setHost(const adr host) {
        my.host = host;
        return 0;
    };

    void setMethod(const HTTPMethod method) {
        my.method = method;
    };

    int setEndpoint(const adr endpoint) {
        my.endpoint = endpoint;
        return 0;
    };

    int addHeader(const adr key, const adr value) {
        const HTTPHeader header = new HTTPHeader(key, value);
        my.headers.push_back($header);
    };

    void setBody(const adr body) {
        my.body = body;
        const adr contentLen = malloc(10);
        const int size = str.len(body);
        str.int_toString(size, contentLen);
        my.addHeader("Content-Length", contentLen);
    };

    public string getHeaders() {
        string ret = new string("");
        for int i = 0; i < my.headers.count(); i = i + 1 {
            const HTTPHeader header = my.headers.get(i).expect("Get header failed");
            ret = ret + header.key;
            ret = ret + ": ";
            ret = ret + header.value;
            ret = ret + "\r\n";
        };
        return ret;
    };

    string toString() {
        string ret = new string("");
        ret = ret + methodToString(my.method);
        ret = ret + " ";
        ret = ret + my.endpoint + " HTTP/1.1";
        ret = ret + "\r\nHost: ";
        ret = ret + my.host;
        ret = ret + "\r\n";
        ret = ret + my.getHeaders();
        ret = ret + "\r\n";
        ret = ret + my.body;
        return ret;
    };

    HTTPMessage send(const int bufferSize) {
        const string msg = my.toString();
        const adr buffer = malloc(bufferSize);
        const adr host = my.host;
        const adr endpoint = my.endpoint;
        const adr msg_prim = msg.cstr();
        request(host, endpoint, "80", msg_prim, buffer, bufferSize);
        const let ret = new string(buffer);
        return new HTTPMessage(buffer);
      };
};

class HTTPResponse {
    const private vector::<HTTPHeader> headers = new vector::<HTTPHeader>();
    const private adr statusMessage = statusMessage;
    const private adr statusCode = statusCode;
    private adr body = body;
    
    HTTPResponse init(const adr body, const adr statusCode, const adr statusMessage) {
        return my;
    };

    void addHeader(const adr key, const adr value) {
        const HTTPHeader header = new HTTPHeader(key, value);
        my.headers.push_back($header);
        return;
    };

    void setBody(const adr body) {
        my.body = body;
    };

    string getHeaders() {
        string ret = new string("");
        for int i = 0; i < my.headers.count(); i = i + 1 {
            const HTTPHeader header = my.headers.get(i).expect("Get header failed");
            ret = ret + header.key;
            ret = ret + ": ";
            ret = ret + header.value;
            ret = ret + "\r\n";
        };
        return ret;
    };

    string toString() {
        string ret = new string("");
        ret = ret + "HTTP/1.1 ";
        ret = ret + my.statusCode;
        ret = ret + " ";
        ret = ret + my.statusMessage;
        ret = ret + "\r\n";
        ret = ret + my.getHeaders();
        ret = ret + "\r\n";
        ret = ret + my.body;
        ret = ret + "\r\n";
        return ret;
    };

    string getBody() {
        string ret = new string("");
        ret = ret + my.body;
        return ret;
    };

    string getStatusCode() {
        string ret = new string("");
        ret = ret + my.statusCode;
        return ret;
    };

    string getStatusMessage() {
        string ret = new string("");
        ret = ret + my.statusMessage;
        return ret;
    };
};

class EndPointStruct {
    adr foo = foo;
    string path = path;
    HTTPMethod method = method;

    EndPointStruct init(const adr foo, const string path, const HTTPMethod method) {
        return my;
    };

    adr _call(const adr ref, const HTTPMessage msg, * const any arg2, * const any arg3, * const any arg4) {
        return my.foo(ref, msg, arg2, arg3, arg4);
    };

    fn toString() -> string {
        return `EndPointStruct(path: {my.path}, method: {methodToString(my.method)}, foo: {my.foo != NULL})`;
    };
};

class HTTPServer {
    private vector::<EndPointStruct> endpoints = new vector::<EndPointStruct>();

    HTTPServer init() {
        return my;
    };

    private string get404Error() {
        string ret = new string("");
        ret = ret + "HTTP/1.1 404 Not Found\r\n";
        ret = ret + "Content-Type: text/html\r\n";
        ret = ret + "Content-Length: 0\r\n";
        ret = ret + "\r\n";
        ret = ret + "<html><body><h1>404 Not Found</h1></body></html>\r\n";
        return ret;
    };

    void registerEndpoint(const adr foo, const string path, const HTTPMethod method) {
        const EndPointStruct eps = new EndPointStruct(foo, path, method);
        my.endpoints.push_back($eps);
        return;
    };

    bool processRequests(const adr req, const adr rsp) {
        st.print("Processing request:\n");
        st.print({req});
        // HTTPMessage msg = new HTTPMessage(req);
        // string path = msg.endpoint;
        // HTTPMethod method = msg.method;
        // for int i = 0; i < my.endpoints.count(); i = i + 1 {
        //     EndPointStruct eps = my.endpoints.get(i);
        //     if (eps.path == path) & (eps.method == method) {
        //         HTTPMessage rs = new HTTPMessage(req);
        //         let ret = eps(NULL, rs);
        //         rsp =: ret;
        //         delete msg;
        //         return true;
        //     };
        // };
        st.print("404 Not Found\n");
        const let err = my.get404Error();
        rsp =: "HTTP/1.1 404 Not Found\r\n<html><body><h1>404 Not Found</h1></body></html>\r\n";
        return false;
    };

    void start(const short port) {
        listen(port, 10000000, HTTPServer.processRequests, my);
    };
};


export any requestWorker(const HTTPRequest _arg) : async.worker {
    return _arg.send(10000000);
};
