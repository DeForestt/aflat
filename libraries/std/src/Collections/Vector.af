.needs <std>
import List from "Collections";
import Result from "Utils/Result";
import Error from "Utils/Error";
import option from "Utils/option";
import Map from "Utils/Map";
import result from "Utils/result";
import Iterator from "Collections/Iterator";
import Scroller from "Collections/Scroller";
import {accept, reject} from "Utils/result" under res;
import {some, none} from "Utils/option" under opt;

types(T)
class vector {
    private List inner = new List(T, size);

    fn init(*const int size) -> Self {
        return my;
    };

    fn push_back(const T value) -> Self {
        my.inner.pushBack(value);
        return my;
    };

    fn count() -> int {
        return my.inner.getCount();
    };

    fn pop_back() -> option::<T> {
        const let ret = my.inner.popBack();
        return ret.match({
            "some": fn (const T value) {
                return opt.some::<T>(value);
            },
            "none": fn () {
                return opt.none::<T>();
            }
        });
    };

    fn get(const int index) -> option::<T> {
        const let ret = my.inner.get(index);
        return ret.match({
            "ok": fn (const T value) {
                return opt.some::<T>(value);
            },
            "_": fn () {
                return opt.none::<T>();
            }
        });
    };

    fn _call(const int index) -> option::<T> {
        return my.get(index);
    };

    fn push_value(const T value) -> Self {
        my.inner.pushValue(value);
        return my;
    };

    fn findFirst(const bool<any, *any> predicate, * const adr args) -> option::<T> {
        const let ret = my.inner.findFirst(predicate, args);
        return ret.match({
            "some": fn (const T value) {
                return opt.some::<T>(value);
            },
            "none": fn () {
                return opt.none::<T>();
            }
        });
    };

    fn scroll() -> Scroller {
        return my.inner.scroll();
    };

};