.needs <std>

import Iterator, Next, Peek from "Collections/Iterator";
import Result from "Utils/Result";
import {accept, reject} from "Utils/Result" under res;
import Map from "Utils/Map";
import string from "String";
import Error from "Utils/Error";

class EndOfRange signs Error {
    const string message = "End of range";

    string stdErrorMessage() : Render {
        return `{my._typeName}: {my.message}`;
    };

    EndOfRange init() {
        return my;
    };
};

class Enumerator signs Iterator {
    private const Iterator iterator = iterator;
    int index = 0;

    Result next() : Next {
        const int i = my.index;
        my.index = my.index + 1;
        const let val = my.iterator.next();
        if val.hasError() return val;
        const any val = val.value([] => panic("Iterator returned empty value"));
        const let map = {
            "value": val,
            "index": i
        };
        return res.accept(map);
    };

    Enumerator init(const Iterator iterator) {
       return my;
    };
};

safe dynamic class Range signs Iterator {
    private const int start = start;
    private const int end = end;
    private mutable int step = step;
    private mutable int index = start;

    private mutable int refcount = 1;

    Result next() : Next {
        if my.index >= my.end {
            return res.reject(new EndOfRange());
        };
        const let val = my.index;
        my.index = my.index + my.step;
        return res.accept(val);
    };

    Range init(const int start, const int end, ? const int step) {
        my.step = if step == 0 1 else step;
        return my;
    };

    Range get() {
        my.refcount = my.refcount + 1;
        return my;
    };
};

export Range range(const int start, const int end, ? const int step) {
    return new Range(start, end, step);
};

export Enumerator enumerate(const Iterator iterator) {
    return new Enumerator(iterator);
};