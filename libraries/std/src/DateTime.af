.needs <asm>
.needs <std>

import string from "String";
import {print} from "String" under str;
import ICollection from "Collections";
import List from "Collections";
import Result from "Utils/Result";
import Function from "Utils/Functions";
import { accept, reject } from "Utils/Result" under pr;

class DateTime{
    private int seconds;
    private int day;
    private int month;
    private int year;
    private int hour;
    private int minute;
    private int second;

    public DateTime init(int seconds);
    public int getSeconds();
    public int getMinutes();
    public int getHours();
    public int getDays();
    public int getDay();
    public int getMonth();
    public int getYear();
    public int getSecond();
    public int getHour();
    public int getMinute();
    public string toString();

    private int Copy<<=>>(DateTime);
    
    private int epochToDate();
};

private int daysInMonth(const int month, const int year){
    if month == 2 {
        if year % 4 == 0 {
            if year % 100 == 0 {
                if year % 400 == 0 {
                    return 29;
                };
                return 28;
            };
            return 29;
        };
        return 28;
    };

    if (month == 4) | (month == 6) | (month == 9) | (month == 11) {
        return 30;
    };

    return 31;
};

private int daysInYear(const int year){
    if year % 4 == 0 {
        if year % 100 == 0 {
            if year % 400 == 0 {
                return 366;
            };
            return 365;
        };
        return 366;
    };
    return 365;
};

private int daysSinceJan1(const int month, const int day, const int year){
    int days = 0;
    for int i = 1; i < month; i++
        days = days + daysInMonth(i, year);
    
    days = days + day - 1;
    return days;
};

private int dateRelativeTo(const int month, const int day, const int year, const int relYear){
    int days = daysSinceJan1(month, day, year);
    for int i = relYear; i < year; i++
        days = days + daysInYear(i);
    return days;
};

private int epochToDate@DateTime(){
    const int epoch = my.seconds;
    int days = epoch / 86400;
    int year = 1970;
    int month = 1;
    int day = 1;
    while days >= daysInYear(year) {
        days = days - daysInYear(year);
        year = year + 1;
    };

    while days >= daysInMonth(month, year) {
        days = days - daysInMonth(month, year);
        month = month + 1;
    };
    day = day + days;
    my.year = year;
    my.month = month;
    my.day = day;

    // now calculate the time
    int time = epoch % 86400;
    const int hour = time / 3600;
    time = time % 3600;
    const int minute = time / 60;
    const int second = time % 60;
    my.hour = hour;
    my.minute = minute;
    my.second = second;
    return 0;
};


private int dayOfWeek(const int month, const int day, const int year){
    const int days = dateRelativeTo(month, day, year, 1) + 1;
    return days % 7;
};

private adr dowToString(const int dow){
    if dow == 0
        return "Sunday";
    if dow == 1
        return "Monday";
    if dow == 2
        return "Tuesday";
    if dow == 3
        return "Wednesday";
    if dow == 4
        return "Thursday";
    if dow == 5
        return "Friday";
    if dow == 6
        return "Saturday";
    panic("Invalid day of week");
};


DateTime init@DateTime(const int seconds){
    my.seconds = seconds;
    my.epochToDate();
};

int getSeconds@DateTime(){
    return my.seconds;
};

int getMinutes@DateTime(){
    return my.seconds / 60;
};

int getHours@DateTime(){
    return my.seconds / 3600;
};

int getDays@DateTime(){
    return my.seconds / 86400;
};

int getDay@DateTime(){
    return my.day;
};

int getMonth@DateTime(){
    return my.month;
};

int getYear@DateTime(){
    return my.year;
};

int getSecond@DateTime(){
    return my.second;
};

int getMinute@DateTime(){
    return my.minute;
};

int getHour@DateTime(){
    return my.hour;
};

export DateTime Now(* int timeZone){
    int seconds = sys_time();
    timeZone = timeZone * 3600;
    seconds = seconds + timeZone;
    return new DateTime(seconds);
};

export Result mmddyyyyToDate(const string input, *mutable char splitChar){
    if splitChar == '\0' splitChar = '-';
    const List l = input.split(splitChar);
    if l.getCount() != 3 {
        return pr.reject("Invalid date format")
    };
    const string month = l.get(0);
    const string day = l.get(1);
    const string year = l.get(2);

    const string err = "";
    const int month = month.toInt().resolve([const int value] => return value, [const string error, string e] => {
        e = `{e}Month: {error} `;
        return 0;
    }, err);
    
    const int day = day.toInt().resolve([const int value] => return value, [const string error, string e] => {
        e = `{e}Day: {error} `;
        return 0;
    }, err);

    const int year = year.toInt().resolve([const int value] => return value, [const string error, string e] => {
        e = `{e}Year: {error}`;
        return 0;
    }, err);

    if err.len() > 0 return pr.reject(err);

    const int seconds = dateRelativeTo(month, day, year, 1970) * 86400;

    return pr.accept(new DateTime(seconds));
};

private int longToInt(const long l) {
    const int[2] buffer;
    buffer =: l;
    return buffer[0];
};

export int mills() {
    const TimeSpec ts = TimeSpec();
    sys_clock_gettime(1, ts);
    long ms = ts.tv_sec * 1000;
    ms = ms + (ts.tv_nsec / 1000000);
    return longToInt(ms);
}; 
string toString@DateTime(){
    const string dow = dowToString(dayOfWeek(my.month, my.day, my.year));
    return `{dow}, {my.month}/{my.day}/{my.year} {my.hour}:{my.minute}:{my.second}`;
};