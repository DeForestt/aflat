.needs <std.gs>
.needs <asm.gs>
.needs <strings.gs>
.needs <files.gs>
.needs <Collections>

File createFile(adr fileName){
        File file = malloc(File);
        file.file = sys_create(fileName, #511);
        int test;
        test = file.file;
        if(test < 1){
                return #0;
        };
        return file;
};

File openFile(adr fileName){
        File file = malloc(File);
        adr flag = #2;
        file.file = sys_open(fileName, flag, #777);
        int test;
        test = file.file;
        if(test < 0){
                return #0;
        };
        file.fileName = fileName;
        return file;
};

int close@File(){
        return sys_close(my.file);
};

int write@File(adr text){
        int length = len(text);
        int ret = sys_write(my.file, text, length);
        return ret;
};

int read@File(adr pointer, char delim, char term){
        char input;
        input = '\0';
        char null = '\0';
        while(input != delim){
                sys_read(my.file, ?input, 1);
                char inp;
                inp = input;
                if(inp == term){return 1;};
                pointer =: inp;
                if(inp == delim){pointer =: null};
                pointer = pointer + #1;
        };
        pointer =: null;
        return  0;
};

Array toArray@File(char delim, char term){
	Array a = newArray(adr, 0);
	adr ibuff = malloc(256);
	
	int eof = my.read(ibuff, delim, term);

	while (eof != 1){
		int size;
		size = a.size;
		a.extend(1);
		adr pointer = a.at(size);
		if (eof != 1){
			pointer =: ibuff;
			ibuff = malloc(256);
		};
		eof = my.read(ibuff, delim, term);
	};

        return a;
};

LinkedList toList@File(char delim, char term){
        LinkedList l = newList(adr);
        adr ibuff = malloc(256);
        
        int eof = my.read(ibuff, delim, term);

        while (eof != 1){
                l.append(ibuff);
                ibuff = malloc(256);
                eof = my.read(ibuff, delim, term);
        };

        return l;
};
};