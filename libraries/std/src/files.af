.needs <std.gs>
.needs <asm.gs>


import ICollection from "Collections";
import Array from "Collections";
import LinkedList, List from "Collections";
import {len} from "strings" under str;
import string from "String";
import {print} from "String" under st;
import {printLong, printHex, printInt} from "io" under io;
import Result from "Utils/Result";
import Error from "Utils/Error";
import Render from "Utils/Error/Render";
import { accept, reject } from "Utils/Result" under res;

class fstat{
    long st_dev;
    long st_ino;
    int st_mode;
    int alligner;
    long st_nlink;
    int st_uid;
    int st_gid;
    long st_rdev;
    long st_size;
    long st_blksize;
    long st_blocks;
    Times st_atime;
    Times st_mtime;
    Times st_ctime;
};

class File{
    adr fileName;
    int file;

    int write(adr text);
    void writeBytes(const adr pointer, const int size) {
        sys_write(my.file, pointer, size);
    };
    int read(adr pointer, char delim);
    Array toArray(char delim);
    LinkedList toLinkedList(char delim);
    List toList(char delim);
    string readToEnd();
    int close();
};

class FileError signs Error {
        private string renderMessage() : Render {
                return `File Error`;
        };

        FileError init() {
                return my;
        };
};

export Result createFile(const adr fileName){
        const File file = malloc(File);
        file.file = sys_create(fileName, #511);
        const int test = file.file;
        if(test < 1) {
                free(file);
                return res.reject(new FileError());
        };

        return res.accept(file);
};

export Result openFile(const adr fileName){
        const File file = malloc(File);
        const long flag = #2;
        file.file = sys_open(fileName, flag, #777);
        const int test = file.file;
        if(test < 0){
                free(file);
                return res.reject(new FileError());
        };
        file.fileName = fileName;
        return res.accept(file);
};

int close@File(){
        return sys_close(my.file);
};

int write@File(const adr text){
        const int length = str.len(text);
        const int ret = sys_write(my.file, text, length);
        return ret;
};

int read@File(adr pointer, const char delim){
        const char input = '\0';
        const char null = '\0';
        while(input != delim){
                const int eof = sys_read(my.file, ?input, 1);
                char inp;
                inp = input;
                pointer =: inp;
                if(inp == delim){pointer =: null};
                if(eof == 0){pointer =: null; return 1};
                pointer = pointer + #1;
        };
        pointer =: null;
        return  0;
};

fstat newFstat(const int file) {
  const let stat = new fstat();
  sys_fstat(file, stat);
  return stat;
};

string readToEnd@File(){
        const int file = my.file;
        const fstat stat = newFstat(file);
        const adr buffer = malloc(1 + stat.st_size);
        sys_read(file, buffer, 0 + stat.st_size);
        const adr pointer = buffer + (0 + stat.st_size);
        pointer =: '\0';
        const string text = new string(buffer);
        return text;
};

Array toArray@File(const char delim){
	const Array a = new Array(adr, 0);
	adr ibuff = malloc(256);
	
	int eof = my.read(ibuff, delim);
        int size = 0;
        while (eof != 1){
                size = a.size;
		a.extend(1);
		const adr pointer = a.at(size);
                pointer =: ibuff;
                ibuff = malloc(256);
		eof = my.read(ibuff, delim);
	};

        size = a.size;
        a.extend(1);
        const adr pointer = a.at(size);
        pointer =: ibuff;
        ibuff = malloc(256);

        return a;
};

LinkedList toLinkedList@File(const char delim){
        const LinkedList l = new LinkedList;
        adr ibuff = malloc(256);
        
        int eof = my.read(ibuff, delim);

        while (eof != 1){
                l.append(ibuff);
                ibuff = malloc(256);
                eof = my.read(ibuff, delim);
        };

        l.append(ibuff);
        return l;
};

private int clearChar(adr pointer, const int size){
        int i = 0;
        while(i < size){
                pointer =: '\0';
                pointer = pointer + 1;
                i = i + 1;
        };
};

List toList@File(const char delim){
        const List l = new List(256, 1);
        const char[256] ibuff;
        
        int eof = my.read(ibuff, delim);

        while (eof != 1){
                l.pushBack(ibuff);
                clearChar(ibuff, 256);
                eof = my.read(ibuff, delim);
        };

        l.pushBack(ibuff);
        return l;
};


safe dynamic pedantic class FileManager {
  private mutable int refcount = 1;
  private mutable bool usable = true;
  private mutable File f = createFile(filename).value([const FileManager this] => {
        this.usable = false;
        return NULL;
  });

  FileManager init(const adr filename) {
    return my;
  };
  
  int del() {
        if (my.usable) {
                my.f.close();
                delete my.f;
        };
        return 0;
  };

  
  File _call() {
    if !my.usable {
        // undefined behavior
        panic("Attempted to use an unusable file");  
    };
    my.refcount = my.refcount - 1;
    return my.f;
  };

  void endScope() {
    my.refcount = my.refcount - 1;
    if (my.refcount == 0) {
      my.del();
      free(my);
    };
  };
  
  FileManager get() {
    my.refcount = my.refcount + 1;
    return my;
  };

  FileManager cpy<<=>>(const FileManager other) {
        if (my.usable) {
            my.f.close();
            delete my.f;
        };
        my.f = other.f;
        my.usable = other.usable;
        // invalidate the other
        other.usable = false;
        other.f = NULL;
        return my;
  };

};

