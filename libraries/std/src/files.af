.needs <std.gs>
.needs <asm.gs>

import List from "Collections";
import {len} from "strings" under str;
import string from "String";
import {print} from "String" under st;
import {printLong, printHex, printInt, print} from "io" under io;
import result from "Utils/result";
import Error from "Utils/Error";
import Render from "Utils/Error/Render";
import { accept, reject, resultWrapper } from "Utils/result" under res;
import option from "Utils/option";
import {Some, None} from "Utils/option" under opt;
import vector from "Collections/Vector";


fn strerror(int code) -> adr;

class FileError signs Error {
        int code = code * -1;

        private string renderMessage() : Render {
                const adr myStr = strerror(my.code);
                return `Failed To Open File Error Code ({my.code}): {myStr}`;
        };

        fn init(const int code) -> FileError {
                return my;
        };
};

class ReadError signs Error {
        private int code = code * -1;
        private string renderMessage() : Render {
                if(my.code == -1) {
                        return `End of File Reached`;
                };
                const adr myStr = strerror(my.code);
                return `Failed To Read File Error Code ({my.code}): {myStr}`;
        };

        fn init(const int code) -> ReadError {
                return my;
        };
};

class fstat{
    long st_dev;
    long st_ino;
    int st_mode;
    int alligner;
    long st_nlink;
    int st_uid;
    int st_gid;
    long st_rdev;
    long st_size;
    long st_blksize;
    long st_blocks;
    Times st_atime;
    Times st_mtime;
    Times st_ctime;
};

private fn newFstat(const int file) -> fstat {
  const let stat = new fstat();
  sys_fstat(file, stat);
  return stat;
};

private int clearChar(adr pointer, const int size){
        int i = 0;
        while(i < size){
                pointer =: '\0';
                pointer = pointer + 1;
                i = i + 1;
        };
};

class File{
    adr fileName;
    int file;

    fn write(const adr text) -> int {
        const int length = str.len(text);
        const int ret = sys_write(my.file, text, length);
        return ret;
    };

    fn writeBytes(const adr pointer, const int size) -> void {
        sys_write(my.file, pointer, size);
    };

    fn read(adr pointer, const char delim) -> int {
        const char input = '\0';
        const char null = '\0';
        while(input != delim){
                const int eof = sys_read(my.file, ?input, 1);
                char inp;
                inp = input;
                pointer =: inp;
                if(inp == delim){pointer =: null};
                if(eof == 0){pointer =: null; return 1};
                pointer = pointer + #1;
        };
        pointer =: null;
        return  0;
    };

    fn toVector(const char delim) -> vector::<string> {
        const let l = new vector::<string>();
        const char[256] ibuff;
        
        int eof = my.read(ibuff, delim);

        while (eof != 1){
                l.push_back(new string(ibuff));
                clearChar(ibuff, 256);
                eof = my.read(ibuff, delim);
        };

        l.push_back(new string(ibuff));
        return l;
    };

    fn readToEnd() -> string! {
        const int file = my.file;
        const fstat stat = newFstat(file);
        const int size = 0 + stat.st_size;
        const adr buffer = malloc(1 + size);
        const int err = sys_read(file, buffer, size);
        if err < -1 {
            free(buffer);
            return res.reject::<string>(new ReadError(err));
        } else if err == 0 {
            free(buffer);
            return res.reject::<string>(new ReadError(1));
        };
        const adr pointer = buffer + stat.st_size;
        pointer =: '\0';
        const string text = new string(buffer);
        free(buffer);
        return text;
    };

    fn close() -> int {
        return sys_close(my.file);
    };

    fn rewind() -> void {
        sys_seek(my.file, 0, 0); // SEEK_SET
    };

    fn toString() -> string {
        return `[File]`;
    };
};

export fn createFile(const adr fileName) -> File! {
        const File file = malloc(File);
        const long flag = #2 | #512 | #64; // O_RDWR | O_CREAT | O_TRUNC
        file.file = sys_open(fileName, flag, #511);
        const int test = file.file;
        if(test < 1) {
                free(file);
                return res.reject::<File>(new FileError(test));
        };

        return file;
};

export fn openFile(const adr fileName) -> File! {
        const File file = malloc(File);
        const long flag = #2;
        file.file = sys_open(fileName, flag, #511);
        const int test = file.file;
        if(test < 0){
                free(file);
                return res.reject::<File>(new FileError(test));
        };
        file.fileName = fileName;
        return file;
};


safe dynamic pedantic class FileManager {
  private mutable int refcount = 1;
  private mutable bool usable = true;

  private mutable File f = NULL;

  FileManager init(const adr filename) {
    my.f = match createFile(filename) {
        Ok(file) => file,
        Err() => {
            my.usable = false;
        }
    };
    return my;
  };
  
  int del() {
        if (my.usable) {
                my.f.close();
                delete my.f;
        };
        return 0;
  };
  
  File _call() {
    if !my.usable {
        // undefined behavior
        panic("Attempted to use an unusable file");  
    };
    my.refcount = my.refcount - 1;
    return my.f;
  };

  void endScope() {
    my.refcount = my.refcount - 1;
    if (my.refcount == 0) {
      my.del();
      free(my);
    };
  };
  
  FileManager get() {
    my.refcount = my.refcount + 1;
    return my;
  };

  FileManager cpy<<=>>(const FileManager other) {
        if (my.usable) {
            my.f.close();
            delete my.f;
        };
        my.f = other.f;
        my.usable = other.usable;
        // invalidate the other
        other.usable = false;
        other.f = NULL;
        return my;
  };

};

