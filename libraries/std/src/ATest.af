.needs <std>
import {print} from "String" under str;
import string from "String";
import List from "Collections";
import Map from "Utils/Map";
import unordered_map from "Collections/unordered_map";
import Result from "Utils/Result";
import Error from "Utils/Error";
import option from "Utils/option";
import {some, none} from "Utils/option";

mutable unordered_map::<adr> fixtures = NULL;

export fn getFixtures() -> unordered_map::<adr> {
	if fixtures == NULL {
		fixtures = new unordered_map::<adr>();
	};
	return fixtures;
};

class Description {
	string text = text;
	any<> implementation = implementation;
	fn init(const string text, const any<> implementation) {
		return my;
	};

	fn run() -> bool {
		str.print(my.text + "\n");
		const let foo = my.implementation;
		foo();
		return true;
	};
};

export fn describe(const string text, const any<> implementation) -> void {
	const let desc = new Description(text, implementation);
	desc.run();
};

export fn fix(const adr name, const any<> setUp) -> void {
	const let fixtures = getFixtures();
	fixtures.set(name, setUp);
};

export fn getFixture(const string name) -> any {
	const let name = name.cstr();
	const let fixtures = getFixtures();
	if !fixtures.has(name) {
		str.print(`  Warning: Fixture {name} does not exist.\n`);
		return NULL;
	};
	const let fixture = fixtures.get(name).orElse(fn () panic("Fixture not found"));
	return fixture();
};

mutable any<> beforeEachFn = NULL;

export fn beforeEach(const any<> implementation) -> void {
        beforeEachFn = implementation;
};

export fn it(const string text, const any<> implementation) -> void {
        str.print(`  it: {text}\n`);
        if beforeEachFn != NULL {
                const let cb = beforeEachFn;
                cb();
        };
        implementation();
};

types(T)
export fn assertEqual(const T expected, const T actual) -> void {
	if expected != actual {
		str.print(`      Expected {expected} but got {actual}\n`);
	};
};

types(T)
export fn assertNotEqual(const T expected, const T actual) -> void {
	if expected == actual {
		str.print(`      Expected not {expected} but got {actual}\n`);
	};
};

export fn assertTrue(const bool condition) -> void {
	if !condition {
		str.print(`      Expected true but got false\n`);
	};
};

export fn assertFalse(const bool condition) -> void {
	if condition {
		str.print(`      Expected false but got true\n`);
	};
};

types(T)
export fn assertNull(const T value) -> void {
	if value != NULL {
		str.print(`      Expected null but got {value}\n`);
	};
};

types(any)
export fn assertNotNull(const any value) -> void {
	if value == NULL {
		str.print(`      Expected not null but got null\n`);
	};
};

export fn assertError(const Result result) -> void {
	if !result.hasError() {
		str.print(`      Expected error but got success\n`);
	};
};

export fn assertSuccess(const Result result) -> void {
	if result.hasError() {
		str.print(`      Expected success but got error {result.getError()}\n`);
	};
};
