.needs <std>
.needs <asm>

import {print, printInt} from "io" under io;
import LinkedList from "Collections";
import string from "String";
import {printString} from "String" under str;

mutable int _passes = 0;
mutable int _failures = 0;

class Expectation {
    private generic value = value;
    private bool negate = false;

    Expectation init(const generic value) {
        return my;
    };

    Expectation not() {
        const Expectation e = new Expectation(my.value);
        e.negate = !my.negate;
        return e;
    };

    bool toBe(const generic expected) {
        bool result = my.value == expected;
        if my.negate {
            result = !result;
        };
        if result {
            _passes = _passes + 1;
            io.print("OK\n", 'g');
        } else {
            _failures = _failures + 1;
            io.print("FAIL\n", 'r');
        };
        return result;
    };
};

export Expectation expect(const generic value) {
    return new Expectation(value);
};

class JestTest {
    private string name = new string(name);
    private adr fn = fn;

    JestTest init(const adr name, const adr fn) {
        return my;
    };

    bool run() {
        str.print(`Running {my.name}: `);
        const let foo = my.fn;
        const bool res = foo();
        if res {
            io.print("OK\n", 'g');
            _passes = _passes + 1;
        } else {
            io.print("FAIL\n", 'r');
            _failures = _failures + 1;
        };
        return res;
    };
};

class Suite {
    private string name = new string(name);
    private LinkedList tests = new LinkedList();
    private adr beforeAll = NULL;
    private adr afterAll = NULL;
    private adr beforeEach = NULL;
    private adr afterEach = NULL;

    Suite init(const adr name) {
        return my;
    };

    void addTest(const adr name, const adr fn) {
        my.tests.append(new JestTest(name, fn));
    };

    void setBeforeAll(const adr fn) { my.beforeAll = fn; };
    void setAfterAll(const adr fn) { my.afterAll = fn; };
    void setBeforeEach(const adr fn) { my.beforeEach = fn; };
    void setAfterEach(const adr fn) { my.afterEach = fn; };

    int run() {
        if my.beforeAll != NULL {
            const let ba = my.beforeAll;
            ba();
        };
        str.print(`\nSuite {my.name}\n`);
        for int i = 0; i < my.tests.size(); i++ {
            const JestTest t = my.tests.get(i);
            if my.beforeEach != NULL {
                const let be = my.beforeEach;
                be();
            };
            t.run();
            if my.afterEach != NULL {
                const let ae = my.afterEach;
                ae();
            };
        };
        if my.afterAll != NULL {
            const let aa = my.afterAll;
            aa();
        };
        return 0;
    };
};

export Suite describe(const adr name) {
    return new Suite(name);
};

export bool test(const adr name, const adr fn) {
    const JestTest t = new JestTest(name, fn);
    return t.run();
};

export int report() {
    io.print("Passed tests: "); io.printInt(_passes); io.print("\n");
    io.print("Failed tests: "); io.printInt(_failures); io.print("\n");
    if _failures > 0 {
        return 1;
    } else {
        return 0;
    };
};

