.needs <std>
import {print} from "String" under str;
import string from "String";
import List from "Collections";
import Map from "Utils/Map";
import unordered_map from "Collections/unordered_map";
import Result from "Utils/Result";
import Error from "Utils/Error";
import option from "Utils/option";
import {Some, None} from "Utils/option" under opt;

class FixtureStruct {
	any<> setUp = setUp;
	any<any> tearDown = tearDown;
	fn init(const adr setUp, const adr tearDown) -> Self {
		return my;
	};

	fn setUp() -> any {
		if my.setUp != NULL {
			const let foo = my.setUp;
			return foo();
		} else {
			return NULL;
		};
	};

	fn tearDown(const any value) -> void {
		if my.tearDown != NULL {
			const let foo = my.tearDown;
			foo(value);
		};
		return;
	};

	fn _call() -> any {
		return my.setUp();
	};

	fn toString() -> string {
		return `FixtureStruct(setUp: {my.setUp != NULL}, tearDown: {my.tearDown != NULL})`;
	};
};

mutable unordered_map::<FixtureStruct> fixtures = NULL;
mutable Map fixtureData = NULL;

export fn getFixtures() -> unordered_map::<FixtureStruct> {
	if fixtures == NULL {
		fixtures = new unordered_map::<FixtureStruct>();
	};
	return fixtures;
};

export fn getFixtureData() -> Map {
	if fixtureData == NULL {
		fixtureData = new Map();
	};
	return fixtureData;
};

fn builtList() -> List {
	return getFixtureData().keys();
};

export fn tearDownFixtures() -> void {
	const let built = getFixtureData();
	const let fixtures = getFixtures();
	const let keys = fixtures.keys();
	for int i = 0; i < keys.getCount(); i++ {
		const string key = keys.get(i).expect("Key not found");
		if built.has(key.cstr()) {
			const any data = built.get(key.cstr()).orElse(fn () panic("Fixture data not found"));
			const let fixture = fixtures.get(key.cstr()).expect("Fixture not found");
			fixture.tearDown(data);
		};
	};
	built.clear();
};

class Description {
	string text = text;
	any<> implementation = implementation;
	fn init(const string text, const any<> implementation) {
		return my;
	};

	fn run() -> bool {
		str.print(my.text + "\n");
		const let foo = my.implementation;
		foo();
		return true;
	};
};

export fn describe(const string text, const adr implementation) -> void {
	const let desc = new Description(text, implementation);
	desc.run();
};

export fn fix(const adr name, const adr setUp, * const adr tearDown) -> void {
	const let fixtures = getFixtures();
	if fixtures.has(name) {
		const let fixtureData = getFixtureData();
		const let fixture = fixtures.get(name).expect("Fixture not found");
		if fixtureData.has(name) {
			const any data = fixtureData.get(name).orElse(fn () panic("Fixture data not found"));
			fixture.tearDown(data);
		};
	};
	const let fixture = new FixtureStruct(setUp, tearDown);
	fixtures.set(name, fixture);
};

export fn getFixture(const string name) -> any {
	const let fd = getFixtureData();
	if fd.has(name) {
		const any data = fd.get(name).orElse(fn () panic("Fixture data not found"));
		return data;
	};
	const let name = name.cstr();
	const let fixtures = getFixtures();
	const let fixture = fixtures.get(name).expect("Fixture not found");
	const any data = fixture.setUp();
	fd.set(name, data);
	return data;
};

mutable any<> beforeEachFn = NULL;

export fn beforeEach(const adr implementation) -> void {
        beforeEachFn = implementation;
};

export fn it(const adr text, const adr implementation) -> void {
        str.print(`  it: {text}\n`);
        if beforeEachFn != NULL {
                const let cb = beforeEachFn;
                cb();
        };
        implementation();
		tearDownFixtures();
};

types(T)
export fn assertEqual(const T expected, const T actual) -> void {
	if expected != actual {
		str.print(`      Expected {expected} but got {actual}\n`);
	};
};

types(T)
export fn assertNotEqual(const T expected, const T actual) -> void {
	if expected == actual {
		str.print(`      Expected not {expected} but got {actual}\n`);
	};
};

export fn assertTrue(const bool condition) -> void {
	if !condition {
		str.print(`      Expected true but got false\n`);
	};
};

export fn assertFalse(const bool condition) -> void {
	if condition {
		str.print(`      Expected false but got true\n`);
	};
};

types(T)
export fn assertNull(const T value) -> void {
	if value != NULL {
		str.print(`      Expected null but got {value}\n`);
	};
};

types(any)
export fn assertNotNull(const any value) -> void {
	if value == NULL {
		str.print(`      Expected not null but got null\n`);
	};
};

export fn assertError(const Result result) -> void {
	if !result.hasError() {
		str.print(`      Expected error but got success\n`);
	};
};

export fn assertSuccess(const Result result) -> void {
	if result.hasError() {
		str.print(`      Expected success but got error {result.getError()}\n`);
	};
};
