.needs <std>
import {print} from "String" under str;
import string from "String";
import List from "Collections";
import Map from "Utils/Map";

mutable Map fixtures = NULL;

export fn getFixtures() -> Map {
	if fixtures == NULL {
		fixtures = new Map();
	};
	return fixtures;
};

class Description {
	string text = text;
	bool<?Map> implementation = implementation;
	fn init(const string text, const bool<?Map> implementation) {
		return my;
	};

	fn run() -> bool {
		str.print(my.text + "\n");
		const let foo = my.implementation;
		const let fixtures = getFixtures();
		foo(fixtures);
		return true;
	};
}

export fn describe(const string text, const bool<?Map> implementation) -> void {
	const let desc = new Description(text, implementation);
	desc.run();
};

export fn fix(const adr name, const any value) -> void {
	const let fixtures = getFixtures();
	fixtures.set(name, value);
};

export fn it(const string text, const adr implementation) -> void {
	str.print(`  it: {text}\n`);
	const let fixtures = getFixtures();
	implementation(fixtures);
};

types(T)
export fn assertEqual(const T expected, const T actual) -> void {
	if expected != actual {
		str.print(`      Expected {expected} but got {actual}\n`);
	};
};

types(T)
export fn assertNotEqual(const T expected, const T actual) -> void {
	if expected == actual {
		str.print(`      Expected not {expected} but got {actual}\n`);
	};
};

export fn assertTrue(const bool condition) -> void {
	if !condition {
		str.print(`      Expected true but got false\n`);
	};
};

export fn assertFalse(const bool condition) -> void {
	if condition {
		str.print(`      Expected false but got true\n`);
	};
};

export fn assertNull(const any value) -> void {
	if value != NULL {
		str.print(`      Expected null but got {value}\n`);
	};
};

export fn assertNotNull(const any value) -> void {
	if value == NULL {
		str.print(`      Expected not null but got null\n`);
	};
};