.needs <std>
import string from "String";
import {print} from "String" under str;
import List from "Collections";
import Bind from "Web/Content/Bind";
import Computed from "Utils/Properties";
import {openFile} from "files" under fs;
import File from "files";
import Error from "Utils/Error";
import Result from "Utils/Result";
import Scroller from "Collections/Scroller";

class Content {
    contract {
        mutable string content = "";
        mutable string cleanContent = "";
        const List bindings = new List(Bind);
    };

    void loadFile(const adr fileName) {
        
		const File f = fs.openFile(fileName).expect("Failed to open file");
		my.cleanContent = f.readToEnd();
		my.content = my.cleanContent.cstr();
		return;
    };

    Content init() {
        return my;
    };

    adr render() {
        my.content = my.cleanContent;
        string buffer = my.content;

        for int i = 0; i < my.bindings.getCount(); i = i + 1 {
            const Bind binding = my.bindings.get(i).expect("Binding count corrupted");
            const string key = binding.key;
            const string val = binding.val;
            buffer = buffer.replace(key, val);
        };
        return buffer.cstr();
    };
};
