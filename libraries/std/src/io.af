.needs "/std/head/math.gs"
.needs "/std/head/io.gs"
.needs "/std/head/strings.gs"
.needs "/std/head/asm.gs"
.needs "/std/head/std.gs"

int readString(adr pointer){
        char input = ' ';
        char nl = ascii(10);
        char null = ascii(0);
        while(input != nl){
                pull ?input;
                pointer =: input;
                if(input == nl){pointer =: null};
                pointer = pointer + 1;
        };
        pointer =: null;
        return  0;
};

int clearInput(){
        char nl = ascii(10);
        char buffer = ' ';
        while (buffer != nl){pull ?buffer};
        return 0;

int print(adr input){
        int len = len(input);
        sys_write(1, input, len);
        return 0;
};

char toChar(int input){
        char output = '0';
        if(input > 9){output = 'A'};
        if(input == 0){output = '0'};
        if(input == 1){output = '1'};
        if(input == 2){output = '2'};
        if(input == 3){output = '3'};
        if(input == 4){output = '4'};
        if(input == 5){output = '5'};
        if(input == 6){output = '6'};
        if(input == 7){output = '7'};
        if(input == 8){output = '8'};
        if(input == 9){output = '9'};
        return output;
};

int toInt(char input){
        if(input == '0'){return 0};
        if(input == '1'){return 1};
        if(input == '2'){return 2};
        if(input == '3'){return 3};
        if(input == '4'){return 4};
        if(input == '5'){return 5};
        if(input == '6'){return 6};
        if(input == '7'){return 7};
        if(input == '8'){return 8};
        if(input == '9'){return 9};
        return 0;
};

 int pullInt(int sigfigs){
        int i = sigfigs - 1;
        int value = 0;
        int h = 0;
        int factor = 0;
        char input;
        while (i > -1){
                pull ?input;
                h = toInt(input);
                factor = exp(10, i);
                h = factor * h;
                value = value + h;
                i = i - 1;
        };
        clearInput();
        return value;
 };

int printInt(int input){
        int h = 0;
        int ten = 10;
        int factor = 0;
        int i = 0;

        if (input == 0){
                print("0");
                return 0;
        };

        if (input < 0){
                print("-");
                input = input * -1;
        };

        h = input * 1;
        while (h != 0){
                h = h / ten;
                i = i + 1;
        };
        i = i - 1;

        char out;
        while (i > -1){
                factor = exp(10, i);
                h = input / factor;
                out = toChar(h);
                push ?out;
                h = h * factor;
                input = input - h;
                i = i - 1;
        };
        return 0;
};

/*
 * A function print out a float
 * arg: input, a pointer to a float
 * arg: signed, if 1 will print the plus sign
 * return: 0 on success, -1 on failure
*/

int printFloat(adr input, int signed){

	if(input == #0){
		return -1;
	};

	int percision = 6;

	char mySign = ascii(0);
	// as input into a new int
	int inputInt = input as int;
	if (inputInt == 0){
		printInt(0);
		return 0;
	};

	//get the sign bit of the float
	
	int sign = inputInt >> 31;
	
	//get the exponent of the float
	
	int exponent = inputInt >> 23;
	exponent = exponent & 255;
	exponent = exponent - 127;


	//get the mantissa of the float
	int mantissa = inputInt & 8388607;


	//load the manissa bits into a linked list
	Bit head = newBit(0);

	//printInt(head.value);
	Bit current;
	current = head;
	int j = 0;
	while(j < 23){
		Bit new = newBit(mantissa & 1);
		//printInt(new.value);
		current.next = new;
		new.last = current;
		current = new;
		mantissa = mantissa >> 1;
		j = j + 1;
	};
	
	new = newBit(1);
	current.next = new;
	new.last = current;
	current = new;

	//find last element in the list
	current = head;
	while(current.next != #0){
		current = current.next;
	};


	//print the sign bit
	if(sign != 0){
		mySign = '-';
	};
	if(signed == 1){
		if(sign == 0){
			mySign = '+';
		};
	};
	//convert bits to an int
	int factor;
	int result;

	factor = exponent;
	int i = 0;
	while(factor > -1){
		if (current.value == 1){
			int append = exp(2, factor);
			result = result + append;
		};
		current = current.last;
		factor = factor - 1;
		i = i + 1;
	};

	factor = exp(10, percision);
	factor = factor * 5;
	int two = 2;
	int decimalPlacess = 0;

	while(i < 23){
		if (current.value == 1){
			decimalPlacess = decimalPlacess + factor;
		};
		current = current.last;
		factor = factor / two;
		i = i + 1;
	};

	push ?mySign; printInt(result); print("."); printInt(decimalPlacess);
	
	return 0;	
};