.needs <asm>
.needs <std>

import {ascii, len} from "strings" under str;
import {exp, longExp} from "math" under math;
export int printInt(int i);

private int charToColor(char c){
        if c == 'B' return 30;
        if c == 'r' return 31;
        if c == 'g' return 32;
        if c == 'b' return 33;
        if c == 'c' return 34;
        if c == 'm' return 35;
        if c == 'p' return 36;
       if c == 'w' return 37;
};

export int readString(adr pointer){
        char input = ' ';
        char nl = '\n';
        char null = '\0';
        while(input != nl){
                sys_read(0, ?input, 1);
                pointer =: input;
                if(input == nl){pointer =: null};
                pointer = pointer + 1;
        };
        pointer =: null;
        return  0;
};

export int printChar(char c){
        sys_write(1, ?c, 1);
        return 0;
};

private int clearInput(){
        char nl = str.ascii(10);
        char buffer = ' ';
        while (buffer != nl)
                sys_read(0, ?buffer, 1);
        return 0;
};

export int print(adr input, * char color){
        int len = str.len(input);
        if color != '\0' {
                print("\e[");
                printInt(charToColor(color));
                printChar('m');
        };
        sys_write(1, input, len);
        if color != '\0'
                print("\e[0m");
        return 0;
};

export char toChar(int input){
        char output = '0';
        if(input > 9){output = 'X'};
        if(input == 0){output = '0'};
        if(input == 1){output = '1'};
        if(input == 2){output = '2'};
        if(input == 3){output = '3'};
        if(input == 4){output = '4'};
        if(input == 5){output = '5'};
        if(input == 6){output = '6'};
        if(input == 7){output = '7'};
        if(input == 8){output = '8'};
        if(input == 9){output = '9'};
        if(input == 10){output = 'A'};
        if(input == 11){output = 'B'};
        if(input == 12){output = 'C'};
        if(input == 13){output = 'D'};
        if(input == 14){output = 'E'};
        if(input == 15){output = 'F'};

        return output;
};

private char longtoChar(long input){
        if input == #0 return '0';
        if input == #1 return '1';
        if input == #2 return '2';
        if input == #3 return '3';
        if input == #4 return '4';
        if input == #5 return '5';
        if input == #6 return '6';
        if input == #7 return '7';
        if input == #8 return '8';
        if input == #9 return '9';
        if input == #10 return 'A';
        if input == #11 return 'B';
        if input == #12 return 'C';
        if input == #13 return 'D';
        if input == #14 return 'E';
        if input == #15 return 'F';

        return 'X';
};

export int toInt(char input){
        if(input == '0'){return 0};
        if(input == '1'){return 1};
        if(input == '2'){return 2};
        if(input == '3'){return 3};
        if(input == '4'){return 4};
        if(input == '5'){return 5};
        if(input == '6'){return 6};
        if(input == '7'){return 7};
        if(input == '8'){return 8};
        if(input == '9'){return 9};
        if(input == 'A'){return 10};
        if(input == 'B'){return 11};
        if(input == 'C'){return 12};
        if(input == 'D'){return 13};
        if(input == 'E'){return 14};
        if(input == 'F'){return 15};
        return -1;
};

export int pullInt(int sigfigs){
        int i = sigfigs - 1;
        int value = 0;
        int h = 0;
        int factor = 0;
        char input;
        while (i > -1){
                sys_read(0, ?input, 1);
                h = toInt(input);
                factor = math.exp(10, i);
                h = factor * h;
                value = value + h;
                i = i - 1;
        };
        clearInput();
        return value;
};

export int printInt(int input){
        int h = 0;
        int ten = 10;
        int factor = 0;
        int i = 0;

        if (input == 0){
                print("0");
                return 0;
        };

        if (input < 0){
                print("-");
                input = input * -1;
        };

        h = input * 1;
        while (h != 0){
                h = h / ten;
                i = i + 1;
        };
        i = i - 1;

        char out;
        while (i > -1){
                factor = math.exp(10, i);
                h = input / factor;
                out = toChar(h);
                printChar(out);
                h = h * factor;
                input = input - h;
                i = i - 1;
        };
        return 0;
};

export int printUnsignedInt(int input){
        int h = 0;
        int ten = 10;
        int factor = 0;
        int i = 0;

        if (input == 0){
                print("0");
                return 0;
        };

        h = input * 1;
        while (h != 0){
                h = h / ten;
                i = i + 1;
        };
        i = i - 1;

        char out;
        while (i > -1){
                factor = math.exp(10, i);
                h = input / factor;
                out = toChar(h);
                printChar(out);
                h = h * factor;
                input = input - h;
                i = i - 1;
        };
        return 0;
};

export int printHex(adr input){
        long h = #0;
        long factor = 0;
        int i = 0;

        if (input == #0){
                print("0");
                return 0;
        };

        if (input < #0){
                print("-");
                input = input * -1;
        };

        h = input;
        while (h != #0){
                h = h / #16;
                i = i + 1;
        };
        i = i - 1;

        while (i > -1){
                factor = math.longExp(16, i);
                h = input / factor;
                char out = longtoChar(h);
                printChar(out);
                h = h * factor;
                input = input - h;
                i = i - 1;
        };
        return 0;
};

export int printLong(long input){
        long h = 0;
        long ten = 10;
        long factor = 0;
        int i = 0;

        if (input == #0){
                print("0");
                return 0;
        };

        if (input < #0){
                print("-");
                input = input * -1;
        };

        h = input;
        while (h != #0){
                h = h / ten;
                i = i + 1;
        };
        i = i - 1;

        while (i > -1){
                factor = math.longExp(10, i);
                h = input / factor;
                char out = longtoChar(h);
                printChar(out);
                h = h * factor;
                input = input - h;
                i = i - 1;
        };
        return 0;
};

export int printFloat(adr f){
	// use bit manipulation to convert float to int
	int i = f as int;
	// get sign
	int sign = i >> 31;
	// get exponent
	i = f as int;
	int exponent = (i >> 23) & 255;

	// get mantissa
	int mantissa = i & 8388607;

	// denormalize
	if exponent == 0 {
		exponent = 1;
		int man = mantissa << 1;
		mantissa = man;
	} else {
		exponent = exponent - 127;
		mantissa = mantissa | 8388608;
	};

	// calculate float
	int whole = mantissa >> (23 - exponent);
	// get fractional part
	int frac = mantissa & (8388607 >> exponent);
	// calculate fractional part
	int fracPart = 0;
	int mul = 5 * math.exp(10, 6);
	int fracCount = 0;
	// ffffffff = 4294967295
	while (frac != 0) & (frac <= 429496729) {
		int nfrac = frac << 1;
		int bit = nfrac >> 23;
		frac = nfrac;
		fracPart = fracPart + (bit * mul);
		frac = frac & 8388607;
		mul = mul / 2;
		fracCount = fracCount + 1;
	};

	if sign == -1 {
		printChar('-');
	};
	printInt(whole);
	printChar('.');
	printInt(fracPart);
};

export int clear(){
        print("\e[1;1H\e[2J");
        return 0;
};