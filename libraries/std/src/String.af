.root "head"
.needs <String>
.needs <std>
.needs <strings>
.needs <io>
char lower(char c);
char upper(char c);


String init@String(adr value){
    int length = len(value);
    length = length + 1;
    my.head = malloc(length);
    adr head = my.head;
    memcopy(value, head, length);
};

String concat@String(String s){
    int mylen = len(my.head);
    int slen = len(s.head);
    slen = slen + 1;
    int length = mylen + slen;
    adr newhead = malloc(length);
    adr ret = newhead;
    memcopy(my.head, newhead, mylen);
    newhead = newhead + mylen;
    memcopy(s.head, newhead, slen);
    String newString = new String(ret);
    free(ret);
    return newString;
};

String stitch@String(adr value){
    int mylen = len(my.head);
    int slen = len(value);
    slen = slen + 1;
    int length = mylen + slen;
    adr newhead = malloc(length);
    adr ret = newhead;
    memcopy(my.head, newhead, mylen);
    newhead = newhead + mylen;
    memcopy(value, newhead, slen);
    String newString = new String(ret);
    free(ret);
    return newString;
};

String subString@String(int start, int end){
    adr head = my.head;
    int mylen = len(head);
    int length = end - start;
    adr newhead = malloc(length);
    adr ret = newhead;
    head = head + start;
    memcopy(head, newhead, length);
    String newString = new String(ret);
    free(ret);
    return newString;
};

int compare@String(String s){
    adr string = s.head;
    adr mystring = my.head;
    int comp = str_comp(string, mystring);
    return comp;
};

int equal@String(adr s){
    int comp = str_comp(my.head, s);
    return comp;
};

char at@String(int index){
    char ch = str_at(my.head, index);
    return ch;
};

int indexOf@String(char ch){
    int index = str_find(my.head, ch);
    return index;
};

int delete@String(){
    adr head = my.head;
    free(head);
    free(my);
};

String printString(String s){
    adr head = s.head;
    print(head);
    return s;
};

String getString(){
    adr buff = malloc(1);
    adr save = buff;
    int buffSize = 1;
    adr pointer;
    char input = ' ';
    char nl = '\n';
    char null = '\0';
    int i = 0;
    while(input != nl){
        pull ?input;
        buff = buff + i;
        buff =: input;
        if(input == nl){buff =: null};
        buffSize = buffSize + 1;
        save = realloc(save, buffSize);
        buff = save;
        i = i + 1;
    };
    String s = new String(save);
    free(save);
    return s;
};

String copy@String(String s){
    my.delete();
    return s;
};

String trim@String(char ch){
    int length = my.len();
    int i = 0;
    char test = my.at(i);
    while(test == ch){
        i = i + 1;
        test = my.at(i);
    };

    int j = length - 1;
    test = my.at(j);

    while(test == ch){
        j = j - 1;
        test = my.at(j);
    };
    j = j + 1;
    
    String newString = my.subString(i, j);

    return newString;
};

String replace@String(char o, char n){
    adr newhead = malloc(my.len());
    adr save = newhead;
    int length = my.len();
    length = length + 1;
    adr head = my.head;
    memcopy(head, newhead, length);
    int i = 0;
    while(i < length){
        if(my.at(i) == o){
            newhead = newhead + i;
            newhead =: n;
        };
        i = i + 1;
    };
    String newString = new String(save);
    free(save);
    return newString;
};

String toLower@String(){
    adr newhead = malloc(my.len());
    adr save = newhead;
    int length = my.len();
    length = length + 1;
    adr head = my.head;
    int i = 0;
    while(i < length){
        char c = my.at(i);
        c = lower(c);
        newhead =: c;
        newhead = newhead + 1;
        i = i + 1;
    };
    String newString = new String(save);
    free(save);
    return newString;
};

String toUpper@String(){
    adr newhead = malloc(my.len());
    adr save = newhead;
    int length = my.len();
    length = length + 1;
    adr head = my.head;
    int i = 0;
    while(i < length){
        char c = my.at(i);
        c = upper(c);
        newhead =: c;
        newhead = newhead + 1;
        i = i + 1;
    };
    String newString = new String(save);
    free(save);
    return newString;
};

int len@String(){
    return len(my.head);
};

char lower(char c){
    char 4 buff;
    adr cast = ?buff;
    cast =: 0;
    if (c > '@'){
        if (c < '['){
            int r = c + 32;
            cast =: r;
            c = cast as char;
        };
    };
    return c;
};

char upper(char c){
    char 4 buff;
    adr cast = ?buff;
    cast =: 0;
    if (c > '`'){
        if (c < '{'){
            int r = c - 32;
            cast =: r;
            c = cast as char;
        };
    };
    return c;
};