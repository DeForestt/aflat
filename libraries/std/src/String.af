.needs <std>
.needs <asm>

import ICollection from "Collections";
import LinkedList, List from "Collections";

import * from "strings" under str;
import {print, printInt} from "io" under io;

private char lower(char c);
private char upper(char c);

class String{
    private adr head;

    String init(adr value);
    String concat<<&>>(String s);
    String stitch<<+>>(adr s);
    String copy<<=>>(String s);
    String replace(char o, char n);
    LinkedList split(* char c);
    String toLower();
    String toUpper();
    String trim(* char ch);
    char at(int i);
    adr getPrimitive();

    String subString(int start, int end);
    int loop(adr foo, * adr args);

    // compare is for compairing to another string object
    bool compare(String s);
    // equal is for compairing to a string literal or a char array
    bool equal<<==>>(adr s);

    bool isNumeric();

    int indexOf(char c);
    int toInt();
    int len();

    int del();
};


bool isNumeric@String(){
    if my.len() == 0
        return false;
    for int i = 0; i < my.len(); i++ {
        if (my.at(i) < '0') | (my.at(i) > '9')
            return false;
    };
    return true;
};

String init@String(adr value){
    int length = str.len(value);
    length = length + 1;
    my.head = malloc(length);
    adr head = my.head;
    memcpy(head, value, length);
};

String concat@String(String s){
    int mylen = str.len(my.head);
    int slen = str.len(s.head);
    slen = slen + 1;
    int length = mylen + slen;
    adr newhead = malloc(length);
    adr ret = newhead;
    memcpy(newhead, my.head, mylen);
    newhead = newhead + mylen;
    memcpy(newhead, s.head, slen);
    String newString = new String(ret);
    free(ret);
    return newString;
};

String stitch@String(adr value){
    int mylen = str.len(my.head);
    int slen = str.len(value);
    slen = slen + 1;
    int length = mylen + slen;
    adr newhead = malloc(length);
    adr ret = newhead;
    memcpy(newhead, my.head, mylen);
    newhead = newhead + mylen;
    memcpy(newhead, value, slen);
    String newString = new String(ret);
    free(ret);
    return newString;
};

String subString@String(int start, int end){
    adr head = my.head;
    int mylen = str.len(head);
    int length = end - start;
    length = length;
    adr newhead = malloc(length + 1);
    adr ret = newhead;
    head = head + start;
    memcpy(newhead, head, length);
    newhead = newhead + length;
    newhead =: '\0';
    String newString = new String(ret);
    free(ret);
    return newString;
};

bool compare@String(String s){
    adr strin = s.head;
    adr mystring = my.head;
    int comp = str.str_comp(strin, mystring);
    return comp == 1;
};

bool equal@String(adr s){
    int comp = str.str_comp(my.head, s);
    return comp == 1;
};

adr getPrimitive@String(){
    return my.head;
};

char at@String(int index){
    char ch = str.str_at(my.head, index);
    return ch;
};

int indexOf@String(char ch){
    int index = str.str_find(my.head, ch);
    return index;
};

int del@String(){
    adr head = my.head;
    free(head);
};

int loop@String(const adr foo, * adr args){
    adr head = my.head;
    adr bar = foo;
    int length = str.len(head);
    int i = 0;
    while(i < length){
        char ch = str.str_at(head, i);
        int brk = bar(ch, i, args);
        i = i + 1;
        if(brk == 1){
            return 0;
        };
    };
    return 0;
};

export String printString(String s){
    adr head = s.getPrimitive();
    io.print(head);
    return s;
};

export String getString(){
    adr buff = malloc(1);
    adr save = buff;
    int buffSize = 1;
    adr pointer;
    char input = ' ';
    char nl = '\n';
    char null = '\0';
    int i = 0;
    while(input != nl){
        sys_read(0, ?input, 1);
        buff = buff + i;
        buff =: input;
        if(input == nl){buff =: null};
        buffSize = buffSize + 1;
        save = realloc(save, buffSize);
        buff = save;
        i = i + 1;
    };
    String s = new String(save);
    free(save);
    return s;
};

String copy@String(String s){
    delete my;
    return s;
};

String trim@String( * char ch){
    if ch == '\0'
        ch = ' ';
    int length = my.len();
    int i = 0;
    char test = my.at(i);
    while(test == ch){
        i = i + 1;
        test = my.at(i);
    };

    int j = length - 1;
    test = my.at(j);

    while(test == ch){
        j = j - 1;
        test = my.at(j);
    };
    j = j + 1;
    
    String newString = my.subString(i, j);

    return newString;
};

String replace@String(char o, char n){
    adr newhead = malloc(my.len());
    adr save = newhead;
    int length = my.len();
    length = length + 1;
    adr head = my.head;
    memcpy(newhead, head, length);
    int i = 0;
    while(i < length){
        if(my.at(i) == o){
            newhead = newhead + i;
            newhead =: n;
        };
        i = i + 1;
    };
    String newString = new String(save);
    free(save);
    return newString;
};

String toLower@String(){
    adr newhead = malloc(my.len());
    adr save = newhead;
    int length = my.len();
    length = length + 1;
    adr head = my.head;
    int i = 0;
    while(i < length){
        char c = my.at(i);
        c = lower(c);
        newhead =: c;
        newhead = newhead + 1;
        i = i + 1;
    };
    String newString = new String(save);
    free(save);
    return newString;
};

String toUpper@String(){
    adr newhead = malloc(my.len());
    adr save = newhead;
    int length = my.len();
    length = length + 1;
    adr head = my.head;
    int i = 0;
    while(i < length){
        char c = my.at(i);
        c = upper(c);
        newhead =: c;
        newhead = newhead + 1;
        i = i + 1;
    };
    String newString = new String(save);
    free(save);
    return newString;
};

LinkedList split@String(* char c){
    LinkedList list = new LinkedList(String.del, true);
    if c == '\0'
        c = ' ';
    adr head = my.head;
    int length = my.len();
    int newStringStart = 0;
    for int i = 0; i < length; i++ {
        char ch = my.at(i);
        if ch == c {
            int newStringEnd = i;
            String newString = my.subString(newStringStart, newStringEnd);
            list.append(newString);
            newStringStart = newStringEnd + 1;
        };
    };
    String newString = my.subString(newStringStart, length);
    list.append(newString);
    return list;
};

int toInt@String(){
    if !my.isNumeric()
        panic("Attempt to convert non-numeric string to int");
    return str.str_toInt(my.head);
};

int len@String(){
    // loop through the head and count the number of characters
    int length = 0;
    adr head = my.head;
    while(head as char != '\0'){
        head = head + 1;
        length = length + 1;
    };
    return length;
};

private char lower(char c){
    if (c > '@'){
        if (c < '['){
            c = c + 32;
        };
    };
    return c;
};

private char upper(char c){
    if (c > '`'){
        if (c < '{'){
            c = c - 32;
        };
    };
    return c;
};

private bool match(char c, char p) {
    if p == '.' return true;
    if p == '*' return true;
    if p == 'd' return
        c >= '0' & c <= '9';
    if p == 'D' return
        c < '0' | c > '9';
    if p == 'w' return 
        (c >= 'a' & 
            c <= 'z') |
        (c >= 'A' &
            c <= 'Z')
        | (c == '_');
    if p == 'W' return
        !match(c, 'w');
    if p == 's' return 
        c == ' ' | 
        c == '\t' |
        c == '\n' |
        c == '\r';
    if p == 'S' return
        !match(c, 's');
    if p == c return true;
    return false;
};

export bool matches(String input, adr pattern){
    String pString = new String(pattern);

    int i = 0;
    int j = 0;

    if pString.len() != input.len() return false;
    
    while i < input.len() & j < pString.len() {
        char pChar = pString.at(j);
        char iChar = input.at(i);
        if !match(iChar, pChar) return false;
        i++;
        j++;
    };

    return true;
};

export String consume(adr pattern, * adr message){
    const String input = getString();
    if matches(input, pattern)
        return input;

    if message != NULL {
        io.print(message); 
        io.print(" ");
    };
    
    return consume(pattern, message);
};

safe dynamic class string {
    private adr head;
    private int refcount = 1;

    string init(adr head) {
        my.head = malloc(str.len(head) + 1);
        memcpy(my.head, head, str.len(head) + 1);
        return my;
    };

    int del(){
        free(my.head);
    };

    bool compare<<==>>(string other) {
        return str.str_comp(my.head, other.head) == 1;
    };

    string get(){
        my.refcount = my.refcount + 1;
        return my;
    };

    string cpy<<=>>(string other) {
        free(my.head);
        other.refcount = other.refcount - 1;
        my.refcount = my.refcount - 1;
        my.head = malloc(str.len(other.head) + 1);
        memcpy(my.head, other.head, str.len(other.head) + 1);
        if (other.refcount == 0) {
            free(other.head);
            free(other);
        } else if (my.refcount == 0) {
            free(my.head);
            delete my;
        };
        return my;
    };

    char at(int index) {
        char[10] buff = my.head;
        return buff[index];
    };

    adr cstr() {
        return my.head;
    };

    bool input(adr prompt) {
        free(my.head);
        if prompt != NULL
            io.print(prompt);
        adr buff = malloc(1);
        adr save = buff;
        int buffSize = 1;
        adr pointer;
        char input = ' ';
        char nl = '\n';
        char null = '\0';
        int i = 0;
        while(input != nl){
            sys_read(0, ?input, 1);
            buff = buff + i;
            buff =: input;
            if(input == nl){buff =: null};
            buffSize = buffSize + 1;
            save = realloc(save, buffSize);
            buff = save;
            i = i + 1;
        };
        my.head = buff;
        return true;
    };

    int getRefcount() {
        return my.refcount;
    };
    
    string concat<<+>>(string other) {
        int myLen = str.len(my.head);
        int otherLen = str.len(other.head);
        adr newHead = malloc(myLen + otherLen + 1);
        memcpy(newHead, my.head, myLen);
        memcpy(newHead + myLen, other.head, otherLen + 1);
        string newString = new string(newHead);
        free(newHead);
        other.refcount = other.refcount - 1;
        my.refcount = my.refcount - 1;

        if (other.refcount == 0) {
            delete other;
        } else if (my.refcount == 0) {
            delete my;
        };
        return newString;
    };

    List split(char delim) {
        List list = new List(string, 1, string.del);
        int myLen = str.len(my.head);
        adr buff = malloc(1);
        adr save = buff;
        int buffSize = 1;

        for int i = 0; i < myLen; i = i + 1 {
            adr curr = my.head + i;
            char c = curr as char;
            if (c == delim) {
                buff = buff + 1;
                buff =: '\0';
                let s = new string(save);
                list.pushBack(s);
                //free(save);
                buffSize = 1;
            } else {
                buffSize = buffSize + 1;
                save = realloc(save, buffSize);
                buff = save;
                buff = buff + buffSize - 2;
                buff =: c;
            };
        };
        buff = buff + 1;
        buff =: '\0';
        let s = new string(save);
        list.pushBack(s.get());
        free(save);
        return list;
    };

    int forEach(adr func, * adr args) {
        int myLen = str.len(my.head);
        for int i = 0; i < myLen; i = i + 1 {
            adr curr = my.head + i;
            char c = curr as char;
            func(c, i, args);
        };
        return 0;
    };

    int len() {
        return str.len(my.head);
    };

    string copy() {
        return new string(my.head);
    };

    bool isNumeric() {
        int myLen = str.len(my.head);
        for int i = 0; i < myLen; i = i + 1 {
            adr curr = my.head + i;
            char c = curr as char;
            if (c < '0' | c > '9') return false;
        };
        return true;
    };

    int toInt() {
        if !my.isNumeric() return 0;
        return str.str_toInt(my.head);
    };

    string toUpper() {
        adr newhead = malloc(my.len() + 1);
        adr save = newhead;
        int length = my.len();
        int i = 0;
        while(i < length){
            char c = my.at(i);
            c = upper(c);
            newhead =: c;
            newhead = newhead + 1;
            i = i + 1;
        };
        newhead =: '\0';
        string newString = save;
        free(save);
        return newString;
    };

    string toLower() {
        adr newhead = malloc(my.len() + 1);
        adr save = newhead;
        int length = my.len();
        int i = 0;
        while(i < length){
            char c = my.at(i);
            c = lower(c);
            newhead =: c;
            newhead = newhead + 1;
            i = i + 1;
        };
        newhead =: '\0';
        string newString = save;
        free(save);
        return newString;
    };

    string title() {
        adr newhead = malloc(my.len() + 1);
        adr save = newhead;
        int length = my.len();
        int i = 0;
        bool space = true;
        while(i < length){
            char c = my.at(i);
            if (space) {
                c = upper(c);
                space = false;
            } else {
                c = lower(c);
            };
            if (c == ' ') space = true;
            newhead =: c;
            newhead = newhead + 1;
            i = i + 1;
        };
        newhead =: '\0';
        string newString = save;
        free(save);
        return newString;
    };


    string replaceChar(char old, char n) {
        char[10] newHead = malloc(my.len() + 1);
        int length = my.len();
        memcpy(newHead, my.head, length + 1);
        for int i = 0; i < length; i = i + 1 {
            char c = newHead[i];
            if (c == old) newHead[i] = n;
        };
        string newString = newHead;
        free(newHead);
        return newString;
    };

    int find(string sub, int start) {
        int myLen = str.len(my.head);
        int subLen = str.len(sub.head);
        if (subLen > myLen) return -1;
        for int i = start; i < myLen - subLen + 1; i = i + 1 {
            bool found = true;
            for int j = 0; j < subLen; j = j + 1 {
                char c1 = my.at(i + j);
                char c2 = sub.at(j);
                if (c1 != c2) {
                    found = false;
                    j = subLen;
                };
            };
            if (found) return i;
        };
        return -1;
    };

    string replace(string sub, string n) {
        // find all occurences of sub in my
        int myLen = str.len(my.head);
        int subLen = str.len(sub.head);
        int nLen = str.len(n.head);
        int newLen = myLen - subLen + nLen;
        adr newHead = malloc(newLen + 1);
        adr save = newHead;
        int i = 0;
        while(i < myLen) {
            int index = my.find(sub, i);
            if (index == -1) {
                memcpy(newHead, my.head + i, myLen - i);
                newHead = newHead + myLen - i;
                i = myLen;
            } else {
                // check if there is enough space
                if newHead + index - i + nLen > save + newLen {
                    // not enough space
                    // reallocate
                    int newNewLen = newLen + 100;
                    adr newNewHead = realloc(save, newNewLen + 1);
                    newHead = newNewHead + (newHead - save);
                    save = newNewHead;
                    newLen = newNewLen;
                };

                memcpy(newHead, my.head + i, index - i);
                newHead = newHead + index - i;
                memcpy(newHead, n.head, nLen);
                newHead = newHead + nLen;
                i = index + subLen;
            };
        };
        newHead =: '\0';
        string newString = save;
        free(save);
        return newString;
    };
    string subString(int start, int end) {
        int length = my.len();
        if (start < 0) | (start > length) | (end < 0) | (end > length) | (start > end) return new string("");
        int newLength = end - start;
        char[10] newHead = malloc(newLength + 1);
        memcpy(newHead, my.head + start, newLength);
        newHead[newLength] = '\0';
        return newHead;
    };

    string trim(* char ch) {
        if ch == '\0'
            ch = ' ';

        int start = 0;
        int end = my.len() - 1;

        while (my.at(start) == ch){start = start + 1;};
        while (my.at(end) == ch) end = end - 1;
        return my.subString(start, end + 1);
    };

    int indexOf(char ch) {
        int length = my.len();
        for int i = 0; i < length; i = i + 1 {
            if (my.at(i) == ch) return i;
        };
        return -1;
    };

    int endScope() {
        my.refcount = my.refcount - 1;
        if my.refcount == 0 {
            delete my;
        };
        return 0;
    };
};

export string create_string(adr head) {
    return new string(head);
};

export int print(string obj) {
    io.print(obj.cstr());
    return 0;
};