.needs <std>
.needs <asm>

import ICollection from "Collections";
import LinkedList, List from "Collections";
import Result from "Utils/Result";
import Function from "Utils/Functions";
import {accept, reject} from "Utils/Result" under prod;
import { exp } from "math" under math;
import Error from "Utils/Error";

import * from "strings" under str;
import {print, printInt, printHex} from "io" under io;

private char lower(char c);
private char upper(char c);

class String{
    private adr head;

    String init(adr value);
    String concat<<&>>(String s);
    String stitch<<+>>(adr s);
    String copy<<=>>(String s);
    String replace(char o, char n);
    LinkedList split(* char c);
    String toLower();
    String toUpper();
    String trim(* char ch);
    char at(int i);
    adr getPrimitive();

    String subString(int start, int end);
    int loop(adr foo, * adr args);

    // compare is for compairing to another string object
    bool compare(String s);
    // equal is for compairing to a string literal or a char array
    bool equal<<==>>(adr s);

    bool isNumeric();

    int indexOf(char c);
    int toInt();
    int len();

    int del();
};


bool isNumeric@String(){
    if my.len() == 0
        return false;
    for int i = 0; i < my.len(); i++ {
        if (my.at(i) < '0') | (my.at(i) > '9')
            return false;
    };
    return true;
};

String init@String(const adr value){
    int length = str.len(value);
    length = length + 1;
    my.head = malloc(length);
    const adr head = my.head;
    memcpy(head, value, length);
};

String concat@String(const String s){
    const int mylen = str.len(my.head);
    int slen = str.len(s.head);
    slen = slen + 1;
    const int length = mylen + slen;
    adr newhead = malloc(length);
    const adr ret = newhead;
    memcpy(newhead, my.head, mylen);
    newhead = newhead + mylen;
    memcpy(newhead, s.head, slen);
    const String newString = new String(ret);
    free(ret);
    return newString;
};

String stitch@String(const adr value){
    const int mylen = str.len(my.head);
    int slen = str.len(value);
    slen = slen + 1;
    const int length = mylen + slen;
    adr newhead = malloc(length);
    const adr ret = newhead;
    memcpy(newhead, my.head, mylen);
    newhead = newhead + mylen;
    memcpy(newhead, value, slen);
    const String newString = new String(ret);
    free(ret);
    return newString;
};

String subString@String(const int start, const int end){
    adr head = my.head;
    int length = end - start;
    length = length;
    adr newhead = malloc(length + 1);
    const adr ret = newhead;
    head = head + start;
    memcpy(newhead, head, length);
    newhead = newhead + length;
    newhead =: '\0';
    const String newString = new String(ret);
    free(ret);
    return newString;
};

bool compare@String(const String s){
    const adr strin = s.head;
    const adr mystring = my.head;
    const int comp = str.str_comp(strin, mystring);
    return comp == 1;
};

bool equal@String(const adr s){
    const int comp = str.str_comp(my.head, s);
    return comp == 1;
};

adr getPrimitive@String(){
    return my.head;
};

char at@String(const int index){
    const char ch = str.str_at(my.head, index);
    return ch;
};

int indexOf@String(const char ch){
    const int index = str.str_find(my.head, ch);
    return index;
};

int del@String(){
    const adr head = my.head;
    free(head);
};

int loop@String(const adr foo, * const adr args){
    const adr head = my.head;
    const adr bar = foo;
    const int length = str.len(head);
    int i = 0;
    while(i < length){
        const char ch = str.str_at(head, i);
        const int brk = bar(ch, i, args);
        i = i + 1;
        if(brk == 1){
            return 0;
        };
    };
    return 0;
};

export String printString(const String s){
    const adr head = s.getPrimitive();
    io.print(head);
    return s;
};

export String getString(){
    adr buff = malloc(1);
    adr save = buff;
    int buffSize = 1;
    const char input = ' ';
    const char nl = '\n';
    const char null = '\0';
    int i = 0;
    while(input != nl){
        sys_read(0, ?input, 1);
        buff = buff + i;
        buff =: input;
        if(input == nl){buff =: null};
        buffSize = buffSize + 1;
        save = realloc(save, buffSize);
        buff = save;
        i = i + 1;
    };
    const String s = new String(save);
    free(save);
    return s;
};

String copy@String(const String s){
    delete my;
    return s;
};

String trim@String( * char ch){
    if ch == '\0'
        ch = ' ';
    const int length = my.len();
    int i = 0;
    char test = my.at(i);
    while(test == ch){
        i = i + 1;
        test = my.at(i);
    };

    int j = length - 1;
    test = my.at(j);

    while(test == ch){
        j = j - 1;
        test = my.at(j);
    };
    j = j + 1;
    
    const String newString = my.subString(i, j);

    return newString;
};

String replace@String(const char o, const char n){
    adr newhead = malloc(my.len());
    const adr save = newhead;
    int length = my.len();
    length = length + 1;
    const adr head = my.head;
    memcpy(newhead, head, length);
    int i = 0;
    while(i < length){
        if(my.at(i) == o){
            newhead = newhead + i;
            newhead =: n;
        };
        i = i + 1;
    };
    const String newString = new String(save);
    free(save);
    return newString;
};

String toLower@String(){
    adr newhead = malloc(my.len());
    const adr save = newhead;
    int length = my.len();
    length = length + 1;
    int i = 0;
    while(i < length){
        char c = my.at(i);
        c = lower(c);
        newhead =: c;
        newhead = newhead + 1;
        i = i + 1;
    };
    const String newString = new String(save);
    free(save);
    return newString;
};

String toUpper@String(){
    adr newhead = malloc(my.len());
    const adr save = newhead;
    int length = my.len();
    length = length + 1;
    int i = 0;
    while(i < length){
        char c = my.at(i);
        c = upper(c);
        newhead =: c;
        newhead = newhead + 1;
        i = i + 1;
    };
    const String newString = new String(save);
    free(save);
    return newString;
};

LinkedList split@String(* char c){
    const LinkedList list = new LinkedList(String.del, true);
    if c == '\0'
        c = ' ';
    const int length = my.len();
    int newStringStart = 0;
    for int i = 0; i < length; i++ {
        const char ch = my.at(i);
        if ch == c {
            const int newStringEnd = i;
            const String newString = my.subString(newStringStart, newStringEnd);
            list.append(newString);
            newStringStart = newStringEnd + 1;
        };
    };
    const String newString = my.subString(newStringStart, length);
    list.append(newString);
    return list;
};

int toInt@String(){
    if !my.isNumeric()
        panic("Attempt to convert non-numeric string to int");
    return str.str_toInt(my.head);
};

int len@String(){
    // loop through the head and count the number of characters
    int length = 0;
    adr head = my.head;
    while(head as char != '\0'){
        head = head + 1;
        length = length + 1;
    };
    return length;
};

private char lower(char c){
    if (c > '@'){
        if (c < '['){
            c = c + 32;
        };
    };
    return c;
};

private char upper(char c){
    if (c > '`'){
        if (c < '{'){
            c = c - 32;
        };
    };
    return c;
};

private bool match(const char c, const char p) {
    if p == '.' return true;
    if p == '*' return true;
    if p == 'd' return
        c >= '0' & c <= '9';
    if p == 'D' return
        c < '0' | c > '9';
    if p == 'w' return 
        (c >= 'a' & 
            c <= 'z') |
        (c >= 'A' &
            c <= 'Z')
        | (c == '_');
    if p == 'W' return
        !match(c, 'w');
    if p == 's' return 
        c == ' ' | 
        c == '\t' |
        c == '\n' |
        c == '\r';
    if p == 'S' return
        !match(c, 's');
    if p == c return true;
    return false;
};

export bool matches(const String input, const adr pattern){
    const String pString = new String(pattern);

    int i = 0;
    int j = 0;

    if pString.len() != input.len() return false;
    
    while i < input.len() & j < pString.len() {
        const char pChar = pString.at(j);
        const char iChar = input.at(i);
        if !match(iChar, pChar) return false;
        i++;
        j++;
    };

    return true;
};

export String consume(const adr pattern, * const adr message){
    const String input = getString();
    if matches(input, pattern)
        return input;

    if message != NULL {
        io.print(message); 
        io.print(" ");
    };
    
    return consume(pattern, message);
};

safe dynamic class string {
    private adr head;
    private int refcount = 1;
    private bool permanent = false;
    public bool debug = false;

    string init(const adr head) {
        if my.head != NULL {
            free(my.head);
        };
        my.head = malloc(str.len(head) + 1);
        memcpy(my.head, head, str.len(head) + 1);
        my.refcount = 1;
        my.permanent = false;
        return my;
    };

    string seal() {
        my.permanent = true;
        return my;
    };

    fn debugRefCount() {
        if my.debug & my.head != NULL {
            if my.refcount < 0 {
                my.refcount = 0;
            };
            io.print(my.head);
            io.print(" RefCount: ");
            io.printInt(my.refcount);
            io.print("\n");
        };
    };

    int del() {
        if my.permanent return 0;
        if my.head != NULL {
            free(my.head);
            my.head = NULL;
        };
        my.refcount = 0;
        my.permanent = false;
        return 0;
    };

    bool compare<<==>>(const string other) {
        return str.str_comp(my.head, other.head) == 1;
    };

    string get(){
        if my.head != NULL {
            if !my.permanent {
                my.refcount = my.refcount + 1;
            };
            my.debugRefCount();
        };
        return my;
    };

    string cpy<<=>>(const string other) {
        if other.head == my.head return my; // self assignment
        if my.head != NULL {
            free(my.head);
        };
        my.head = malloc(str.len(other.head) + 1);
        memcpy(my.head, other.head, str.len(other.head) + 1);
        my.refcount = 1;
        my.permanent = false;
        return my;
    };

    char at(const int index) {
        if index < 0 | index >= str.len(my.head) return '\0';
        return str.str_at(my.head, index);
    };

    adr cstr() {
        return my.head;
    };

    /*
     * copy the string into a buffer
     */
    int copyTo(const adr buff) {
        memcpy(buff, my.head, str.len(my.head) + 1);
        return 0;
    };

    bool input(const adr prompt) {
        if my.head != NULL {
            free(my.head);
        };
        if prompt != NULL
            io.print(prompt);
        adr buff = malloc(1);
        adr save = buff;
        int buffSize = 1;
        const char input = ' ';
        const char nl = '\n';
        const char null = '\0';
        int i = 0;
        while(input != nl){
            sys_read(0, ?input, 1);
            buff = buff + i;
            buff =: input;
            if(input == nl){buff =: null};
            buffSize = buffSize + 1;
            save = realloc(save, buffSize);
            buff = save;
            i = i + 1;
        };
        my.head = buff;
        return true;
    };

    int getRefcount() {
        return my.refcount;
    };
    
    string concat<<+>>(const string other) {
        const int myLen = str.len(my.head);
        const int otherLen = str.len(other.head);
        const adr newHead = malloc(myLen + otherLen + 1);
        memcpy(newHead, my.head, myLen);
        memcpy(newHead + myLen, other.head, otherLen + 1);
        const string newString = new string(newHead);
        free(newHead);
        return newString;
    };

    List split(const char delim) {
        const List list = new List(string, 1, string.del);
        const int myLen = str.len(my.head);
        adr buff = malloc(1);
        adr save = buff;
        int buffSize = 1;

        for int i = 0; i < myLen; i = i + 1 {
            const adr curr = my.head + i;
            const char c = curr as char;
            if (c == delim) {
                buff = buff + 1;
                buff =: '\0';
                const let s = new string(save);
                list.pushBack(s);
                //free(save);
                buffSize = 1;
            } else {
                buffSize = buffSize + 1;
                save = realloc(save, buffSize);
                buff = save;
                buff = buff + buffSize - 2;
                buff =: c;
            };
        };
        buff = buff + 1;
        buff =: '\0';
        const let s = new string(save);
        s.seal();
        s.permanent = true;
        list.pushBack(s.get());
        free(save);
        return list;
    };

    List splitAtFirst(const char delim) {
        const List list = new List(string, 1, string.del);
        const int myLen = str.len(my.head);
        adr buff = malloc(1);
        adr save = buff;
        int buffSize = 1;

        for int i = 0; i < myLen; i = i + 1 {
            const adr curr = my.head + i;
            const char c = curr as char;
            if (c == delim) {
                buff = buff + 1;
                buff =: '\0';
                const let s = new string(save);
                list.pushBack(s);
                //free(save);
                buffSize = 1;
                break;
            } else {
                buffSize = buffSize + 1;
                save = realloc(save, buffSize);
                buff = save;
                buff = buff + buffSize - 2;
                buff =: c;
            };
        };
        buff = buff + 1;
        buff =: '\0';
        const let s = new string(save);
        s.seal();
        s.permanent = true;
        list.pushBack(s.get());
        free(save);
        return list;
    };

    int forEach(const adr func, * const adr args) {
        const int myLen = str.len(my.head);
        for int i = 0; i < myLen; i = i + 1 {
            const adr curr = my.head + i;
            const char c = curr as char;
            const int br = func(c, i, args);
            if br == 1 break;
        };
        return 0;
    };
    
    int len() {
        return str.len(my.head);
    };

    string copy() {
        return new string(my.head);
    };

    bool isNumeric() {
        const int myLen = str.len(my.head);
        for int i = 0; i < myLen; i = i + 1 {
            const adr curr = my.head + i;
            const char c = curr as char;
            if (c < '0' | c > '9') return false;
        };
        return true;
    };

    Result toInt() {
        if !my.isNumeric() return prod.reject(new Error("Attempt to convert non-numeric string to int"));
        return prod.accept(str.str_toInt(my.head));
    };

    string toUpper() {
        adr newhead = malloc(my.len() + 1);
        const adr save = newhead;
        const int length = my.len();
        int i = 0;
        while(i < length){
            char c = my.at(i);
            c = upper(c);
            newhead =: c;
            newhead = newhead + 1;
            i = i + 1;
        };
        newhead =: '\0';
        const string newString = save;
        free(save);
        return newString;
    };

    string toLower() {
        adr newhead = malloc(my.len() + 1);
        const adr save = newhead;
        const int length = my.len();
        int i = 0;
        while(i < length){
            char c = my.at(i);
            c = lower(c);
            newhead =: c;
            newhead = newhead + 1;
            i = i + 1;
        };
        newhead =: '\0';
        const string newString = save;
        free(save);
        return newString;
    };

    string title() {
        adr newhead = malloc(my.len() + 1);
        const adr save = newhead;
        const int length = my.len();
        int i = 0;
        bool space = true;
        while(i < length){
            char c = my.at(i);
            if (space) {
                c = upper(c);
                space = false;
            } else {
                c = lower(c);
            };
            if (c == ' ') space = true;
            newhead =: c;
            newhead = newhead + 1;
            i = i + 1;
        };
        newhead =: '\0';
        const string newString = save;
        free(save);
        return newString;
    };

    string replaceChar(const char old, const char n) {
        char[10] newHead = malloc(my.len() + 1);
        const int length = my.len();
        memcpy(newHead, my.head, length + 1);
        for int i = 0; i < length; i = i + 1 {
            const char c = newHead[i];
            if (c == old) newHead[i] = n;
        };
        const string newString = newHead;
        free(newHead);
        return newString;
    };

    int find(const string sub, const int start) {
        const int myLen = str.len(my.head);
        const int subLen = str.len(sub.head);
        if (subLen > myLen) return -1;
        for int i = start; i < myLen - subLen + 1; i = i + 1 {
            bool found = true;
            for int j = 0; j < subLen; j = j + 1 {
                const char c1 = my.at(i + j);
                const char c2 = sub.at(j);
                if (c1 != c2) {
                    found = false;
                    j = subLen;
                };
            };
            if (found) return i;
        };
        return -1;
    };

    string replace(const string sub, const string n) {
        const int myLen = str.len(my.head);
        const int subLen = str.len(sub.head);
        const int nLen = str.len(n.head);
        int newLen = myLen - subLen + nLen;
        adr newHead = malloc(newLen + 1);
        adr save = newHead;
        int i = 0;
        while(i < myLen) {
            const int index = my.find(sub, i);
            if (index == -1) {
                memcpy(newHead, my.head + i, myLen - i);
                newHead = newHead + myLen - i;
                i = myLen;
            } else {
                // check if there is enough space
                if newHead + index - i + nLen > save + newLen {
                    // not enough space
                    // reallocate
                    const int newNewLen = newLen + 100;
                    const adr newNewHead = realloc(save, newNewLen + 1);
                    newHead = newNewHead + (newHead - save);
                    save = newNewHead;
                    newLen = newNewLen;
                };

                memcpy(newHead, my.head + i, index - i);
                newHead = newHead + index - i;
                memcpy(newHead, n.head, nLen);
                newHead = newHead + nLen;
                i = index + subLen;
            };
        };
        newHead =: '\0';
        const string newString = new string(save);
        free(save);
        return newString;
    };

    string subString(const int start, const int end) {
        const int length = my.len();
        if (start < 0) | (start > length) | (end < 0) | (end > length) | (start > end) return new string("");
        const int newLength = end - start;
        char[10] newHead = malloc(newLength + 1);
        memcpy(newHead, my.head + start, newLength);
        newHead[newLength] = '\0';
        return new string(newHead);
    };

    string trim(* char ch) {
        if ch == '\0'
            ch = ' ';

        int start = 0;
        int end = my.len() - 1;

        while (my.at(start) == ch) start = start + 1;
        while (my.at(end) == ch) end = end - 1;
        return my.subString(start, end + 1);
    };

    int indexOf(const char ch) {
        const int length = my.len();
        for int i = 0; i < length; i = i + 1 {
            if (my.at(i) == ch) return i;
        };
        return -1;
    };

    string push(const char ch) {
        const int length = my.len();
        const char[10] newHead = malloc(length + 2);
        memcpy(newHead, my.head, length);
        adr next = newHead + length;
        next =: ch;
        next = next + 1;
        next =: '\0';
        return new string(newHead);
    };

    string insert(const int i, const string n) {
        const int length = my.len();
        const int nLength = n.len();
        char[10] newHead = malloc(length + nLength + 1);
        memcpy(newHead, my.head, i);
        memcpy(newHead + i, n.head, nLength);
        memcpy(newHead + i + nLength, my.head + i, length - i);
        newHead[length + nLength] = '\0';
        return new string(newHead);
    };

    string sort() {
        string newString = new string("");
        for int i = 0; i < my.len(); i = i + 1 {
            const char c = my.at(i);
            int j = 0;
            bool brk = false;
            while (!brk) {
                if (j == newString.len()) {
                    newString = newString.push(c);
                    brk = true;
                } else {
                    const char c2 = newString.at(j);
                    if (c < c2) {
                        newString = newString.insert(j, `{c}`);
                        brk = true;
                    } else {
                        j = j + 1;
                    };
                };
            };
        };
        return newString;
    };

    int endScope() {
        if my.permanent return 0;
        if my.refcount > 0 {
            my.refcount = my.refcount - 1;
        };
        my.debugRefCount();
        if my.refcount <= 0 {
            my.refcount = 0;
            delete my;
        };
        return 0;
    };
};

export string create_string(const adr head) {
    return new string(head);
};

export int print(const string obj) {
    io.print(obj.cstr());
    return 0;
};

export string readString(*const string prompt) {
    if prompt != NULL print(prompt);
    adr buff = malloc(1);
    adr save = buff;
    int buffSize = 1;
    const char input = ' ';
    const char nl = '\n';
    const char null = '\0';
    int i = 0;
    while(input != nl){
        sys_read(0, ?input, 1);
        buff = buff + i;
        buff =: input;
        if(input == nl){buff =: null};
        buffSize = buffSize + 1;
        save = realloc(save, buffSize);
        buff = save;
        i = i + 1;
    };
    const string n = new string(buff);
    free(save);
    return n.copy();
};

export string floatToString(const float f) {
    let output = ``;
	// use bit manipulation to convert float to int
	int i = f;
	// get sign
	const int sign = i >> 31;
	// get exponent
	i = f;
	int exponent = (i >> 23) & 255;

	// get mantissa
	int mantissa = i & 8388607;

	// denormalize
	if exponent == 0 {
		exponent = 1;
		const int man = mantissa << 1;
		mantissa = man;
	} else {
		exponent = exponent - 127;
		mantissa = mantissa | 8388608;
	};

	// calculate float
	const int whole = mantissa >> (23 - exponent);
	// get fractional part
	int frac = mantissa & (8388607 >> exponent);
	// calculate fractional part
	int fracPart = 0;
	int mul = 5 * math.exp(10, 6);
	int fracCount = 0;
	// ffffffff = 4294967295
	while (frac != 0) & (frac <= 429496729) {
		const int nfrac = frac << 1;
		const int bit = nfrac >> 23;
		frac = nfrac;
		fracPart = fracPart + (bit * mul);
		frac = frac & 8388607;
		mul = mul / 2;
		fracCount = fracCount + 1;
	};

	if sign == -1 {
		output = output + "-";
	};
    output = `{output}{whole}.{fracPart}`;
	return output;
};

export string fString(const string fmt, * adr args) {
    string newString = new string("");
    for int i = 0; i < fmt.len(); i++ {
        if fmt.at(i) == '%' {
            i++;
            if fmt.at(i) == 'a' {
                newString = newString + new String(args as adr);
                args = args + adr;
            } else if fmt.at(i) == 'c' {
                newString = newString.push(args as char);
                args = args + char;
            } else if fmt.at(i) == 'd' {
                const char[10] buff;
                const int n = args as int;
                if n == 0 {
                    newString = newString.push('0');
                } else {
                    str.int_toString(n, buff);
                    const adr buffAdr = buff;
                    newString = newString + new string(buffAdr);
                };
                args = args + int;
            } else if fmt.at(i) == 's' {
                newString = newString + args as string;
                args = args + adr;
            } else if fmt.at(i) == 'b' {
                const bool b = args as bool;
                newString = newString + (if b "true" else "false");
                args = args + bool;
            } else {
                newString = newString.push('%');
                newString = newString.push(fmt.at(i));
            };
        } else {
            newString = newString.push(fmt.at(i));
        };
    };
    return newString.copy();
};

export int readInt(const string prompt, * int tries) {
	if tries <= 0
		tries = 3;
    const string val = readString(prompt);
    const Result res = val.toInt();
	return res.resolve(
		[const int x] => return x,
		[const string err, int t] => {
			t = t - 1;
			if t == 0 panic("Failed to enter an integer");
			return readInt(`{err} please try again ({t} tries left): `, t);
		},
		tries
	);
};

export string itos(const int i) {
    const char[256] buff;
    str.int_toString(i, buff);
    return `{buff}`;
};
