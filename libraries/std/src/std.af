.needs <std>
.needs <asm>

import * from "io" under io;
import string from "String";
import { fString } from "String" under st;

Block head = NULL;

//helpers

Block findFreeBlock(const Block __last, int size) {
  Block current = head;
  size = size - 1;
  while (current != NULL) {
    if(current.free == 1){
        if (current.size > size){return current};
    };

    current = current.next;
  };
  return NULL;
};

Block requestSpace(const Block last, const int size){
    const Block block = brk(NULL);
    const int nsize = size + Block;
    const adr i = brk(block + nsize);

    if(i < #0){return NULL};

    if (last != NULL){
        last.next = block;
    };
    block.next = NULL;
    block.size = size;
    block.free = 0;

    return block;
};

Time newTime(const adr count){
    const Time this = malloc(Time);
    this.amount = count;
    return this;
};

Block getBlock(adr ptr){
    ptr = ptr - Block;
    return ptr;
};

int splitBlock(const Block block, const int size){
    const int test = size + Block;
    int currSize = block.size;
    if (block.size > test){
        Block nBlock = block;
        nBlock = block + size;
        nBlock = nBlock + #16;
        currSize = currSize - 16;
        nBlock.size = currSize - size;
        nBlock.free = 1;
        const Block next = block.next;
        nBlock.next = next;
        block.next = nBlock;
        block.size = size;
    };
};

int defragment(const Block block){
    const Block next = block.next;
    if (block.next == NULL){return 0};
    if (block.free != 1){
        return 0;
    };
    if (next.free == 1){
        const int nextSize = next.size;
        const int currSize = block.size;
        const Block newNext = next.next;
        block.size = currSize + nextSize + Block;
        block.next = newNext;
        return 1;
    };
    return 0;
};

int deFragAll(const Block head){
    Block current = head;
    while (current != NULL){
        int check = defragment(current);
        while (check == 1){
            check = defragment(current);
        };
        current = current.next;
    };
    return 0;
};

//Interface
int memcpy (adr dst, adr src, const int size){
    int i = 0;
    while(i < size){
        const byte b = src as byte;
        dst =: b;
        dst = dst + #1;
        src = src + #1;
        i = i + 1;
    };
    return 0;
};

int free(const adr ptr){
    if(ptr == NULL){
        return 0;
    };
    
    const Block block = getBlock(ptr);
    block.free = 1;
    deFragAll(head);
    return 0;
};

int blockSize(const adr ptr) {
    if (ptr == NULL){
        return 0;
    };

    const Block block = getBlock(ptr);
    return block.size;
};

adr malloc(const int size){

    Block block;

    if(size < 0){return NULL};

    if(head == #0){
        block = requestSpace(NULL, size);
        head = block;
        block = block + #16;
        return block;
    };
    Block last;
    last = head;

    // loop through the list to the last block
    while(last.next != NULL){
        last = last.next;
    };

    block = findFreeBlock(head, size);
    if (block == #0){
        block = requestSpace(last, size);
        if(block == #0){return #0};
    };
    block.free = 0;
    splitBlock(block, size);
    block = block + Block;
    return block;
};

adr realloc(const adr ptr, const int size){
    if (ptr == #0){
        return malloc(size);
    };

    const Block block = getBlock(ptr);
    const int nsize = size - 1;
    if(block.size > nsize){
        return ptr;
    };
    
    const adr new_ptr = malloc(size);
    if (new_ptr == #0){return #0;};
    const int bsize = block.size;
    memcpy(new_ptr, ptr, bsize);
    free(ptr);
    return new_ptr;
};

int inspectHeap() {
    Block current = head;
    io.print("Heap:\n");
    io.print("HEAD --> ");
    while (current != NULL){
        io.printHex(current); io.print(": status: ");
        io.printInt(current.free); io.print(" size: ");
        io.printInt(current.size); io.print(" overhead: ");
        io.printInt(16); io.print("\n");
        current = current.next;
        io.print("         ");
    };
    io.print("NULL\n");
    return 0;
};

Bit newBit(const int value){
	const Bit b = malloc(Bit);
	b.value = value;
	b.last = NULL;
	b.next = NULL;
	return b;
};

Times newTimes(){
    const Times t = malloc(Times);
    t.tms_cstime = 0;
    t.tms_cutime = 0;
    t.tms_stime = 0;
    t.tms_utime = 0;
    return t;
};

int panic(const adr msg){
    io.print("Panic: ", 'r'); io.print(msg);
    io.print("\n");
    sys_exit(1);
};

int assert(const bool cond, * const adr message){
    if !cond {
        io.print("Failed assert: ");
        if message != NULL
            io.print(message);
        io.print("\n");
        sys_exit(1);
    };
    return 0;
};

int sleep(const int seconds, *const int nanoseconds){
    const long sec = #0 + seconds;
    const long nsec = #0 + nanoseconds;
    const TimeSpec t = new TimeSpec();
    t.tv_sec = sec;
    t.tv_nsec = nsec;
    sys_nsleep(t);
    free(t);
    return 0;
};

/*
 * _FCstr utility function to format a c string
 */
adr _fCstr(const adr fmt, * const adr args) {
    return st.fString(fmt, args);
};
