.needs <std>

import string from "String";
import List from "Collections";
import {fPrint} from "io" under io;

class Arg {
    string name = "";
    string value = "";

    Arg init(const string name, const string value) {
        my.name = name;
        my.value = value;
    };
};

class ArgsList {
    List args = new List(Arg);
    List tagLessArgs = new List(string);
    string progName = "";

    ArgsList init(const int argc, const adr argv, const adr tagNames) {
        const adr[0] args = argv;
        const adr[0] tagVals = tagNames;
        const List tags = new List(string);

        int j = 0;
        adr tv = tagVals[j];
        while (tv != NULL) {
            const string v = tagVals[j];
            tags.pushBack(v);
            j++;
            tv = tagVals[j];
        };

        my.progName = args[0];

        for int i = 1; i < argc; i++ {
            const string arg = args[i];
            if (arg.at(0) == '-') {
                const let subArg = arg.subString(1, arg.len());
                if (tags.findFirst([const string s, const string y] => return s == y, subArg) != NULL) {

                    if (i + 1 < argc) {
                        const string val = args[i + 1];
                        my.args.pushBack(Arg(subArg, val));
                        i++;
                    } else {
                        const let val = new string("");
                        const let ag = Arg(subArg, val);
                        my.args.pushBack(ag);
                    };
                } else {
                    io.fPrint("Error: Unknown tag: %s\n", {subArg});
                    return NULL;
                };
            } else {
                my.tagLessArgs.pushBack(arg.copy());
            };
        };

        return my;
    };

    string getArg(const string name) {
        const Arg arg = my.args.findFirst([const Arg a, const string n] => return a.name == n, name);
        if (arg != NULL) {
            return arg.value;
        } else {
            return new string("");
        };
    };

    string getTagLessArg(const int index) {
        if (index < my.tagLessArgs.getCount()) {
            return my.tagLessArgs.get(index);
        } else {
            return new string("");
        };
    };

    bool has(const string name) {
        return my.args.findFirst([const Arg a, const string n] => return a.name == n, name) != NULL;
    };
};
