.needs <std>

import string from "String";
import List from "Collections";
import {fPrint} from "io" under io;
import Error from "Utils/Error";
import Render from "Utils/Error/Render";
import Result from "Utils/Result";
import { accept, reject } from "Utils/Result" under pt;

class ArgparseError signs Error {
    const string message = message.copy();

    string stdErrorMessage() : Render {
        return `{my._typeName}: {my.message}`;
    };

    ArgparseError init(const string message) {
        return my;
    };
};

class Arg {
    string name = "";
    string value = "";

    Arg init(const string name, const string value) {
        my.name = name;
        my.value = value;
    };
};

class ArgsList {
    List args = new List(Arg);
    List tagLessArgs = new List(string);
    string progName = "";

    ArgsList init(const int argc, const adr argv, const adr tagNames) {
        const adr[0] args = argv;
        const adr[0] tagVals = tagNames;
        const List tags = new List(string);

        int j = 0;
        adr tv = tagVals[j];
        while (tv != NULL) {
            const string v = tagVals[j];
            tags.pushBack(v);
            j++;
            tv = tagVals[j];
        };

        my.progName = args[0];

        for int i = 1; i < argc; i++ {
            const string arg = args[i];
            if (arg.at(0) == '-') {
                const let subArg = arg.subString(1, arg.len());
                if (tags.findFirst(fn (const string s, const string y) return s == y, subArg) != NULL) {

                    if (i + 1 < argc) {
                        const string val = args[i + 1];
                        my.args.pushBack(Arg(subArg, val));
                        i++;
                    } else {
                        const let val = new string("");
                        const let ag = Arg(subArg, val);
                        my.args.pushBack(ag);
                    };
                } else {
                    io.fPrint("Error: Unknown tag: %s\n", {subArg});
                    return NULL;
                };
            } else {
                my.tagLessArgs.pushBack(arg.copy());
            };
        };

        return my;
    };

    Result getArg(const string name) {
        return my.args.findFirst(fn (const Arg a, const string n) return a.name == n, name).resolve(
            fn (const Arg a) return pt.accept(a),
            fn() return pt.reject(new ArgparseError("Arg does not exist"))
        );
    };

    bool has(const string name) {
        return my.getArg(name).value(fn () return false);
    };

    Result getTagLessArg(const int index) {
        return my.tagLessArgs.get(index).resolve(
            fn (const string a) return pt.accept(a),
            fn (const string e) return pt.reject(new ArgparseError("Arg does not exist"))
        );
    };
};
