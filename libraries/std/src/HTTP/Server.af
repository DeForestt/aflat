.needs <std>
.needs <server>
import Endpoint from "HTTP/Endpoint";
import List from "Collections";
import HTTPMessage, HTTPMethod, HTTPResponce, NotFoundError, ForbiddenError, BadRequestError, InternalServerError, OtherHTTPError, NotImplementedError from "HTTP";
import Result from "Utils/Result";
import {methodToString} from "HTTP" under http;
import string from "String";
import {print} from "String" under str;
import {printHex} from "io" under io;
import Middleware from "HTTP/Middleware";
import Error from "Utils/Error";
import Map from "Utils/Map";
class Server {
    contract {
        const List endpoints = new List(Endpoint);
        const List middlewares = new List(Middleware);
        int port = 8080;
    };

    Server init(* const int port) {
        if port != 0 my.port = port;
        return my;
    };

    void addEndpoint(const Endpoint endpoint) {
        my.endpoints.stringFunc = Endpoint.toString;
        my.endpoints.pushBack(endpoint);
    };

    void addMiddleware(const Middleware middleware) {
        my.middlewares.stringFunc = Middleware.toString;
        my.middlewares.pushBack(middleware);
    };

    void listen() {
        str.print(`listening on port: {my.port}\n`);
        serve(my.port, [const adr msg, const Server self] => {
            const HTTPMessage msg = new HTTPMessage(msg, true);
            for int i = 0; i < self.endpoints.getCount(); i++ {
                const Endpoint e = self.endpoints.get(i).expect("Endpoint count currupted");
                if http.methodToString(e.method) == http.methodToString(msg.method) & e.path == msg.endpoint {
                    const let handler = e.imp;
                    mutable any data = msg;

                    for int k = 0; k < self.middlewares.getCount(); k++ {
                        const Middleware m = self.middlewares.get(k).expect("Middleware count currupted");
                        const adr implementation = m.implementation;
                        data = implementation(self, data);
                    };

                    const Result response = handler(self, data);

                    const HTTPResponce r = response.match({
                        "ok": [const HTTPResponce res] => return res,
                        "NotFoundError": [const NotFoundError err] => return new HTTPResponce(err.render().cstr(), "404", "Not Found"),
                        "ForbiddenError": [const ForbiddenError err] => return new HTTPResponce(err.render().cstr(), "403", "Forbidden"),
                        "BadRequestError": [const BadRequestError err] => return new HTTPResponce(err.render().cstr(), "400", "Bad Request"),
                        "NotImplementedError": [const NotImplementedError err] => return new HTTPResponce(err.render().cstr(), "501", "Not Implemented"),
                        "_": [const Error err] => {
                            const let val = err.render();
                            return new HTTPResponce(val.cstr(), "500", "Internal Server Error");
                        }
                    });

                    return r.toString().cstr();
                };
            };
            return "HTTP/1.1 404 Not Found\r\n<html><body><h1>404 Not Found</h1></body></html>\r\n";
        }, my);
    };
};
