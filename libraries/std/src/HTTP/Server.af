.needs <std>
.needs <server>
import Endpoint from "HTTP/Endpoint";
import List from "Collections";
import HTTPMessage, HTTPMethod, HTTPResponce from "HTTP";
import Result from "Utils/Result";
import {methodToString} from "HTTP" under http;
import string from "String";
import {print} from "String" under str;
import {printHex} from "io" under io;

class Server {
    contract {
        const List endpoints = new List(Endpoint);
        int port = 8080;
    };

    Server init(* const int port) {
        if port != 0 my.port = port;
        return my;
    };

    void addEndpoint(const Endpoint endpoint) {
        my.endpoints.stringFunc = Endpoint.toString;
        my.endpoints.pushBack(endpoint);
    };

    void listen() {
        str.print(`listening on port: {my.port}\n`);
        serve(my.port, [const adr msg, const Server self] => {
            const HTTPMessage msg = new HTTPMessage(msg, true);
            for int i = 0; i < self.endpoints.getCount(); i++ {
                const Endpoint e = self.endpoints.get(i);
                if http.methodToString(e.method) == http.methodToString(msg.method) & e.path == msg.endpoint {
                    const let handler = e.imp;
                    const Result response = handler(self, msg);
                    if response.hasError() {
                        const string error = response.getError();
                        const HTTPResponce fail = new HTTPResponce(error.cstr(), "500", "Internal Server Error");
                        return fail.toString().cstr();
                    };
                    const HTTPResponce responce = response.value([] => return new HTTPResponce("Unknown Error", "500", "Internal Server Error"));
                    return responce.toString().cstr();
                };
            };
            return "HTTP/1.1 404 Not Found\r\n<html><body><h1>404 Not Found</h1></body></html>\r\n";
        }, my);
    };
};