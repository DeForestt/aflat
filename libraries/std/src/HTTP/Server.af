.needs <std>
.needs <server>
import Endpoint from "HTTP/Endpoint";
import List from "Collections";
import HTTPMessage, HTTPMethod, HTTPResponce, NotFoundError, ForbiddenError, BadRequestError, InternalServerError, OtherHTTPError, NotImplementedError from "HTTP";
import Result from "Utils/Result";
import {methodToString} from "HTTP" under http;
import string from "String";
import {print} from "String" under str;
import {printHex} from "io" under io;
import Middleware from "HTTP/Middleware";
import Error from "Utils/Error";
import Map from "Utils/Map";
class Server {
    contract {
        const List endpoints = new List(Endpoint);
        const List middlewares = new List(Middleware);
        int port = 8080;
    };

    Server init(* const int port) {
        if port != 0 my.port = port;
        return my;
    };

    void addEndpoint(const Endpoint endpoint) {
        my.endpoints.stringFunc = Endpoint.toString;
        my.endpoints.pushBack(endpoint);
    };

    void addMiddleware(const Middleware middleware) {
        my.middlewares.stringFunc = Middleware.toString;
        my.middlewares.pushBack(middleware);
    };

    void listen() {
        str.print(`listening on port: {my.port}\n`);
        serve(my.port, [const adr msg, const Server self] => {
            const HTTPMessage msg = new HTTPMessage(msg, true);
            const string method = http.methodToString(msg.method);
            mutable any data = msg;

            for int k = 0; k < self.middlewares.getCount(); k++ {
                const Middleware m = self.middlewares.get(k).expect("Middleware count currupted");
                const adr implementation = m.implementation;
                data = implementation(self, data);
            };

            for int i = 0; i < self.endpoints.getCount(); i++ {
                const Endpoint e = self.endpoints.get(i).expect("Endpoint count currupted");

                string wildE = e.path.copy();
                string subMsg = msg.endpoint.copy();

                if wildE.find("/:*", 0) != -1 {
                    wildE = wildE.subString(0, wildE.find("/:*", 0));
                    subMsg = subMsg.subString(0, wildE.len());
                };

                if e.method == msg.method & wildE == subMsg {
                    const let handler = e.imp;
                    Result response;

                    if wildE == msg.endpoint {
                        response = handler(self, data, NULL);
                    } else {
                        const let path = msg.endpoint.subString(wildE.len() + 1, msg.endpoint.len());
                        response = handler(self, data, path);
                    };

                    const HTTPResponce r = response.match({
                        "ok": [const HTTPResponce res] => return res,
                        "NotFoundError": [const NotFoundError err] => return new HTTPResponce(err.render().cstr(), "404", "Not Found"),
                        "ForbiddenError": [const ForbiddenError err] => return new HTTPResponce(err.render().cstr(), "403", "Forbidden"),
                        "BadRequestError": [const BadRequestError err] => return new HTTPResponce(err.render().cstr(), "400", "Bad Request"),
                        "NotImplementedError": [const NotImplementedError err] => return new HTTPResponce(err.render().cstr(), "501", "Not Implemented"),
                        "_": [const Error err] => {
                            const let val = err.render();
                            return new HTTPResponce(val.cstr(), "500", "Internal Server Error");
                        }
                    });

                    return r.toString().cstr();
                };
            };
            const HTTPResponce r = new HTTPResponce(`Endpoint {msg.endpoint}: Method {method} not implemented`.cstr(), "501", "Not Implemented");
            return r.toString().cstr();
        }, my);
    };
};
