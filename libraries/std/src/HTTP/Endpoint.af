.needs <std>
import string from "String";
import Server from "HTTP/Server";
import Map from "Utils/Map";
import HTTPMethod, HTTPResponse, HTTPMessage from "HTTP";
import List from "Collections";
import {methodToString} from "HTTP" under http;
import {print} from "String" under str;
import {printHex, printInt} from "io" under io;

class Endpoint {
    contract {
        const adr imp = imp;
        const string path = path;
        HTTPMethod method;
    };
    
    Endpoint init(const any<Server, HTTPMessage> imp, const Server context, const string path, const HTTPMethod method) {
        my.method = method;
        context.addEndpoint(my);
    };
    
    string toString() {
        return `{http.methodToString(my.method)} {my.path}`;
    };

    HTTPResponse _call(const Server context, * const HTTPMessage msg) {
        const let imp = my.imp;
        return imp(context, msg);
    };
};

class Endpoints {
    int id = 0;
    Endpoints init(const Map<Server> imp, const Server context, const string path) {
        const let endpoints = imp(context);
        if endpoints.has("GET") {
            const let get = new Endpoint(endpoints.get("GET").or(NULL), context, path, HTTPMethod.GET);
            context.addEndpoint(get);
        };

        if endpoints.has("POST") {
            const let post = new Endpoint(endpoints.get("POST").or(NULL), context, path, HTTPMethod.POST);
            context.addEndpoint(post);
        };

        if endpoints.has("PUT") {
            const let put = new Endpoint(endpoints.get("PUT").or(NULL), context, path, HTTPMethod.PUT);
            context.addEndpoint(put);
        };

        if endpoints.has("DELETE") {
            const let del = new Endpoint(endpoints.get("DELETE").or(NULL), context, path, HTTPMethod.DELETE);
            context.addEndpoint(del);
        };

        if endpoints.has("PATCH") {
            const let patch = new Endpoint(endpoints.get("PATCH").or(NULL), context, path, HTTPMethod.PATCH);
            context.addEndpoint(patch);
        };

        if endpoints.has("OPTIONS") {
            const let options = new Endpoint(endpoints.get("OPTIONS").or(NULL), context, path, HTTPMethod.OPTIONS);
            context.addEndpoint(options);
        };

        if endpoints.has("HEAD") {
            const let head = new Endpoint(endpoints.get("HEAD").or(NULL), context, path, HTTPMethod.HEAD);
            context.addEndpoint(head);
        };

        if endpoints.has("TRACE") {
            const let trace = new Endpoint(endpoints.get("TRACE").or(NULL), context, path, HTTPMethod.TRACE);
            context.addEndpoint(trace);
        };

        if endpoints.has("CONNECT") {
            const let connect = new Endpoint(endpoints.get("CONNECT").or(NULL), context, path, HTTPMethod.CONNECT);
            context.addEndpoint(connect);
        };
    };
};

// class for When Endpoint is not found
class NotFoundImpl {
    const adr imp = imp;
    NotFoundImpl init(const adr imp, const Server context) {
        context.setNotFound(my);
        return my;
    };

    HTTPResponse _call(const Server context, * const HTTPMessage msg) {
        const let imp = my.imp;
        return imp(context, msg);
    };
};