.needs <std>

class ICollection{
    contract {
        adr forEach = [] => panic("Function (forEach) not implemented on this instance");
        adr where = [] => panic("Function (where) not implemented on this instance");
    };
};

class ListNode{
    adr next;
    adr data;
};

class LinkedList signs ICollection{
    public ListNode head;

    adr init();
    int append(adr data);
    int insert(adr data, int index);
    int del(int index);
    adr get(int index);
    adr stitch(adr New);
    LinkedList reverse();
    LinkedList sort(adr compare, * adr args);
    int find(adr foo, * adr args);
    adr apply(adr foo, * adr args);
    adr map(adr foo, * adr args);
    int size();
    int erace();
    public LinkedList copy<<=>>(adr list);
};

class Array signs ICollection{
    public int typeSize;
    public adr head;
    int size;

    Array init(int typeSize, int size);
    public adr at(int index);
    public int del(int index);
    public int extend(int size);
};


private int forEachLinkedList(LinkedList my, adr foo, adr arg){
    ListNode curr = my.head;
    int i = 0;
    while(curr != NULL){
        adr data;
        data = curr.data;
        int cont = foo(data, i, arg);
        if(cont == 1){
            return 1;
        };
        curr = curr.next;
        i = i + 1;
    };
    return 0;
};

private LinkedList whereLinkedList(LinkedList my, adr foo, adr arg){
    LinkedList newList = new LinkedList();
    ListNode curr = my.head;
    int i = 0;
    while(curr != NULL){
        adr data;
        data = curr.data;
        bool boo = foo(data, i, arg);
        if(boo == true){
            newList.append(data);
        };
        curr = curr.next;
        i = i + 1;
    };
    return newList;
};

LinkedList init@LinkedList(){
    my.head = NULL;
    my.forEach = forEachLinkedList;
    my.where = whereLinkedList;
    return my;
};

int del@LinkedList(int index){
    if index < 0 | index > my.size() {
        return -1;
    };

    ListNode curr = my.head;

    if index == 0 {
        my.head = curr.next;
        return 0;
    };

    int i = 0;
    while(curr != NULL){
        if i == index - 1 {
            ListNode next = curr.next;
            curr.next = next.next;
            return 0;
        };
        curr = curr.next;
        i = i + 1;
    };
    return -1;
};

int stitch@LinkedList(LinkedList ln){
    ListNode curr;
    curr = my.head;
    while(curr.next != NULL){
        curr = curr.next;
    };
    curr.next = ln.head;
    return 0;
};

adr get@LinkedList(int index){
    if (index < 0){
        return NULL;
    };
    ListNode myHead;
    myHead = my.head;
    ListNode myIndex;
    myIndex = myHead;

    int i = 0;
    while(i < index){
        myIndex = myIndex.next;
        i = i + 1;
    };

    return myIndex.data;
};

int append@LinkedList(adr data){
    ListNode ln = new ListNode();
    ln.data = data;
    ln.next = NULL;

    ListNode head = my.head;

    if(head == NULL){
        my.head = ln;
        return 0;
    };

    ListNode curr = my.head;
    ListNode next = curr.next;
    while(next != NULL){
        curr = next;
        next = curr.next;
    };

    curr.next = ln;
    return 0;
};

int insert@LinkedList(adr data, int index){
    if (index < 0 | index > my.size()){
        return -1;
    };

    ListNode ln = new ListNode();
    ln.data = data;
    ln.next = NULL;


    if (index == 0){
        ln.next = my.head;
        my.head = ln;
        return 0;
    };

    ListNode curr;
    curr = my.head;
    
    for int i = 0; i < index - 1 ; i = i + 1
        curr = curr.next;
    
    ListNode next = curr.next;
    curr.next = ln;
    ln.next = next;
    return 0;
};

int size@LinkedList(){
    ListNode curr;
    curr = my.head;
    int i = 0;
    while (curr != NULL) {
        curr = curr.next;
        i = i + 1;
    };
    return i;
};

LinkedList sort@LinkedList(adr foo, adr arg){
    LinkedList n = new LinkedList();
    ListNode curr = my.head;
    while(curr != NULL){
        adr data = curr.data;
        int i = 0;
        bool loop = true;
        while(i < n.size() & loop){
            adr data2 = n.get(i);
            bool cmp = foo(data, data2, arg);
            if(cmp == true){
                n.insert(data, i);
                loop = false;
            };
            i = i + 1;
        };
        if(i == n.size()){
            n.append(data);
        };
        curr = curr.next;
    };
    return n;
};

LinkedList map@LinkedList(adr foo, adr arg){
    LinkedList newList = new LinkedList();
    ListNode curr = my.head;
    int i = 0;
    while(curr != NULL){
        adr data;
        data = curr.data;
        adr newData;
        newData = foo(data, i, arg);
        newList.append(newData);
        curr = curr.next;
        i = i + 1;
    };
    return newList;
};

LinkedList copy@LinkedList(LinkedList list){
    my.erace();
    return list;
};

private int forEachArray(Array my, adr foo, adr arg){
    int size;
    size = my.size;
    adr element;
    int tSize;
    tSize = my.typeSize;
    adr curr;

    int i;
    for i = 0; i < size; i = i + 1 {
        int offset = i * tSize;
        curr = my.head;
        curr = curr + offset;
        int brk = foo(curr, i, arg);
        if (brk == 1){
            return 0;
        };
    };
    return 0;
};

int find@LinkedList(adr foo, adr arg){
    ListNode curr;
    curr = my.head;
    int i = 0;
    while(curr != NULL){
        adr data;
        data = curr.data;
        bool brk = foo(data, i, arg);
        if (brk == true){
            return i;
        };
        curr = curr.next;
        i = i + 1;
    };
    return -1;
};

private Array whereArray(Array my, adr foo, adr arg){
    Array a = new Array(adr, 0);
    int size;
    int tSize;
    tSize = my.typeSize;
    size = my.size;
    int i;
    for i = 0; i < size; i = i + 1 {
        int offset = i * tSize;
        adr curr;
        curr = my.head;
        curr = curr + offset;
        adr save; save = curr;
        bool boo = foo(curr, i, arg);
        if (boo == true){
            a.extend(1);
            int msize;
            msize = a.size;
            msize = msize - 1;
            adr point = a.at(msize);
            point =: save;
        };
    };
    return a;
};

Array init@Array(int typeSize, int size){
    my.size = size;
    my.typeSize = typeSize;
    
    size = size * typeSize;
    my.head = malloc(size);
    my.forEach = forEachArray;
    my.where = whereArray;
    return my;
};

adr at@Array(int index){
    int tSize;
    tSize = my.typeSize;
    int offset = index * tSize;
    adr curr;
    curr = my.head;
    curr = curr + offset;
    return curr;
};

int del@Array(){
    free(my.head);
    return 0;
};

int erace@LinkedList(){
    ListNode curr;
    curr = my.head;
    while(curr != NULL){
        ListNode temp;
        temp = curr.next;
        free(curr.data);
        free(curr);
        curr = temp;
    };
    free(my);
    return 0;
};

LinkedList reverse@LinkedList(){
    // flip all of the node pointers
    ListNode curr;
    curr = my.head;
    ListNode prev;
    prev = NULL;
    while(curr != NULL){
        ListNode temp;
        temp = curr.next;
        curr.next = prev;
        prev = curr;
        curr = temp;
    };
    my.head = prev;
    return my;
};

int extend@Array(int amount){
    adr curr;
    curr = my.head;
    int currSize;
    currSize = my.size;
    my.size = currSize + amount;

    int tSize;
    tSize = my.typeSize;

    amount = amount + currSize;
    amount = amount * tSize;

    my.head = realloc(curr, amount);
    if(my.head == NULL){
        panic("bad realloc\n");
    };
    return  amount;
};