.needs <std>

import * from "io" under io;
import string from "String";
import Result from "Utils/Result";
import Property from "Utils/Properties";
import Iterator from "Collections/Iterator";
import Scroller from "Collections/Scroller";
import Option from "Utils/Option";
import Result from "Utils/Result";
import {accept, reject} from "Utils/Result" under res;
import {some, none} from "Utils/Option" under opt;
import Error from "Utils/Error";
import Render from "Utils/Error/Render";

class ICollection{
    contract {
        adr forEach = [] => panic("Function (forEach) not implemented on this instance");
        adr where = [] => panic("Function (where) not implemented on this instance");
    };
};

class ListNode{
    adr next;
    adr data;
};

class LinkedList {
    public ListNode head;
    public adr pos = my.head;
    private adr delFunc = delFunc;
    bool cleanUp = cleanUp;
    LinkedList init(* adr delFunc, * bool cleanUp);
    int append(adr data);
    int insert(adr data, int index);
    int drop(int index);
    generic get(int index);

    adr stitch(LinkedList New);
    LinkedList reverse();
    LinkedList where(adr foo, * adr args);
    int forEach(adr foo, * adr args);
    LinkedList sort(adr compare, * adr args);
    adr reduce(adr foo, * adr args);
    int find(adr foo, * adr args);
    adr apply(adr foo, * adr args);
    adr map(adr foo, * adr args);
    int size();
    int erace();
    public LinkedList copy<<=>>(adr list);
    int del(){
        if (my.delFunc != NULL) {
            const adr foo = my.delFunc;
            my.forEach(foo);
        };
        if (my.cleanUp) {
            my.forEach(free);
        };
        ListNode curr = my.head;
        ListNode next = NULL;
        while (curr != NULL) {
            next = curr.next;
            free(curr);
            curr = next;
        };
    };
};

class Array signs ICollection{
    public int typeSize;
    public adr head;
    int size;

    Array init(int typeSize, int size);
    public adr at(int index);
    public int del(int index);
    public int extend(int size);
};

class Keyed {
    contract {
        public int key;
    };
};

class BinTree {
    const Keyed data = data;
    private BinTree left = NULL;
    private BinTree right = NULL;

    public BinTree init(const Keyed data) {
        return my;
    };

    public bool insert(const Keyed data) {
        if data.key == my.data.key return false;

        if data.key < my.data.key {
            if my.left == NULL {
                my.left = new BinTree(data);
                return true;
            } else return my.left.insert(data);
        } else {
            if my.right == NULL {
                my.right = new BinTree(data);
                return true;
            } else return my.right.insert(data);
        };

        return true;
    };

    public adr find(const int key) {
        if my.data.key == key return my.data;

        if key < my.data.key {
            if my.left == NULL return NULL
            else return my.left.find(key);
        } else {
            if my.right == NULL return NULL
            else return my.right.find(key);
        };
    };

    public LinkedList traverse() {
        const LinkedList list = new LinkedList();
        list.append(my.data);
        if my.left != NULL list.stitch(my.left.traverse());
        if my.right != NULL list.stitch(my.right.traverse());
        return list;
    };

    public int normalize() {
        if my.left != NULL my.left.normalize();
        if my.right != NULL my.right.normalize();

        if my.left != NULL {
            if my.left.right != NULL {
                const BinTree temp = my.left.right;
                my.left.right = NULL;
                my.left = temp;
            };
        };

        if my.right != NULL {
            if my.right.left != NULL {
                const BinTree temp = my.right.left;
                my.right.left = NULL;
                my.right = temp;
            };
        };

        return 0;
    };
};

adr reduce@LinkedList(const adr foo, * const adr args){
    adr result = my.head.data;
    ListNode node = my.head.next;
    while(node != NULL){
        result = foo(result, node.data, args);
        node = node.next;
    };
    return result;
};

int forEach@LinkedList(const adr foo, * const adr arg){
    ListNode curr = my.head;
    int i = 0;
    while(curr != NULL){
        const adr data = curr.data;
        const int cont = foo(data, i, arg);
        if(cont == 1){
            return 1;
        };
        curr = curr.next;
        i = i + 1;
    };
    return 0;
};

LinkedList where@LinkedList(const adr foo, *const adr arg){
    const LinkedList newList = new LinkedList();
    ListNode curr = my.head;
    int i = 0;
    while(curr != NULL){
        const adr data = curr.data;
        const bool boo = foo(data, i, arg);
        if(boo == true){
            newList.append(data);
        };
        curr = curr.next;
        i = i + 1;
    };
    return newList;
};

LinkedList init@LinkedList( *const adr delFunc, *const bool cleanUp){
    my.head = NULL;
    return my;
};

int drop@LinkedList(const int index){
    if index < 0 | index > my.size() {
        return -1;
    };

    ListNode curr = my.head;

    if index == 0 {
        my.head = curr.next;
        return 0;
    };

    int i = 0;
    while(curr != NULL){
        if i == index - 1 {
            const ListNode next = curr.next;
            curr.next = next.next;
            return 0;
        };
        curr = curr.next;
        i = i + 1;
    };
    return -1;
};

int stitch@LinkedList(const LinkedList ln){
    ListNode curr = my.head;
    while(curr.next != NULL){
        curr = curr.next;
    };
    curr.next = ln.head;
    return 0;
};

generic get@LinkedList(const int index){
    if (index < 0){
        return NULL;
    };
    const ListNode myHead = my.head;
    ListNode myIndex = myHead;

    int i = 0;
    while(i < index){
        myIndex = myIndex.next;
        i = i + 1;
    };

    return myIndex.data;
};

int append@LinkedList(const adr data){
    const ListNode ln = new ListNode();
    ln.data = data;
    ln.next = NULL;

    if(my.head == NULL){
        my.head = ln;
        return 0;
    };

    ListNode curr = my.head;
    ListNode next = curr.next;
    while(next != NULL){
        curr = next;
        next = curr.next;
    };

    curr.next = ln;
    return 0;
};

int insert@LinkedList(const adr data, const int index){
    if (index < 0 | index > my.size()){
        return -1;
    };

    const ListNode ln = new ListNode();
    ln.data = data;
    ln.next = NULL;


    if (index == 0){
        ln.next = my.head;
        my.head = ln;
        return 0;
    };

    ListNode curr;
    curr = my.head;
    
    for int i = 0; i < index - 1 ; i = i + 1
        curr = curr.next;
    
    const ListNode next = curr.next;
    curr.next = ln;
    ln.next = next;
    return 0;
};

int size@LinkedList(){
    ListNode curr = my.head;
    int i = 0;
    while (curr != NULL) {
        curr = curr.next;
        i = i + 1;
    };
    return i;
};

LinkedList sort@LinkedList(const adr foo, const adr arg){
    const LinkedList n = new LinkedList();
    ListNode curr = my.head;
    while(curr != NULL){
        const adr data = curr.data;
        int i = 0;
        bool loop = true;
        while(i < n.size() & loop){
            const adr data2 = n.get(i);
            const bool cmp = foo(data, data2, arg);
            if(cmp == true){
                n.insert(data, i);
                loop = false;
            };
            i = i + 1;
        };
        if(i == n.size()){
            n.append(data);
        };
        curr = curr.next;
    };
    return n;
};

LinkedList map@LinkedList(const adr foo, const adr arg){
    const LinkedList newList = new LinkedList();
    ListNode curr = my.head;
    int i = 0;
    while(curr != NULL){
        const adr data = curr.data;
        const adr newData = foo(data, i, arg);
        newList.append(newData);
        curr = curr.next;
        i = i + 1;
    };
    return newList;
};

LinkedList copy@LinkedList(const LinkedList list){
    my.erace();
    return list;
};

private int forEachArray(const Array my, const adr foo, const adr arg){
    adr curr;

    int i;
    for i = 0; i < my.size; i = i + 1 {
        const int offset = i * my.typeSize;
        curr = my.head;
        curr = curr + offset;
        const int brk = foo(curr, i, arg);
        if (brk == 1){
            return 0;
        };
    };
    return 0;
};

int find@LinkedList(const adr foo, const adr arg){
    ListNode curr;
    curr = my.head;
    int i = 0;
    while(curr != NULL){
        const adr data = curr.data;
        const bool brk = foo(data, i, arg);
        if (brk == true){
            return i;
        };
        curr = curr.next;
        i = i + 1;
    };
    return -1;
};

private Array whereArray(const Array my, const adr foo, const adr arg){
    const Array a = new Array(adr, 0);
    int i;
    for i = 0; i < my.size; i = i + 1 {
        const int offset = i * my.typeSize;
        adr curr = my.head;
        curr = curr + offset;
        adr save; save = curr;
        const bool boo = foo(curr, i, arg);
        if (boo == true){
            a.extend(1);
            int msize;
            msize = a.size;
            msize = msize - 1;
            const adr point = a.at(msize);
            point =: save;
        };
    };
    return a;
};

Array init@Array(const int typeSize, int size){
    my.size = size;
    my.typeSize = typeSize;
    
    size = size * typeSize;
    my.head = malloc(size);
    my.forEach = forEachArray;
    my.where = whereArray;
    return my;
};

adr at@Array(const int index){
    int tSize;
    tSize = my.typeSize;
    const int offset = index * tSize;
    adr curr;
    curr = my.head;
    curr = curr + offset;
    return curr;
};

int del@Array(){
    free(my.head);
    return 0;
};

int erace@LinkedList(){
    ListNode curr = my.head;
    while(curr != NULL){
        ListNode temp;
        temp = curr.next;
        free(curr.data);
        free(curr);
        curr = temp;
    };
    free(my);
    return 0;
};

LinkedList reverse@LinkedList(){
    // flip all of the node pointers
    ListNode curr = my.head;
    ListNode prev = NULL;
    while(curr != NULL){
        const ListNode temp = curr.next;
        curr.next = prev;
        prev = curr;
        curr = temp;
    };
    my.head = prev;
    return my;
};

int extend@Array(int amount){
    adr curr;
    curr = my.head;
    int currSize;
    currSize = my.size;
    my.size = currSize + amount;

    int tSize;
    tSize = my.typeSize;

    amount = amount + currSize;
    amount = amount * tSize;

    my.head = realloc(curr, amount);
    if(my.head == NULL){
        panic("bad realloc\n");
    };
    return  amount;
};

class IndexOutOfRangeError signs Error {
    const string message = message.copy();

    string stdErrorMessage() : Render {
        return `{my._typeName}: {my.message}`;
    };

    IndexOutOfRangeError init(const string message) {
        return my;
    };
}

class List {
    private adr head = malloc(typeSize * size);
    private int typeSize = typeSize;
    private int size = size;
    private int count = 0;
    private adr delFunc = delFunc;
    private adr ini = ini;
    public adr stringFunc = NULL;

    List init(const int typeSize, *const int size, *const adr delFunc, *const adr ini) {
        if size == 0 {
            my.size = 1;
            my.head = malloc(typeSize);
        };
        return my;
    };

    int pushBack(const adr value) {
        if my.count == my.size {
            my.size = my.size * 2;
            my.head = realloc(my.head, my.typeSize * my.size);
        };

        memcpy(my.head + (my.count * my.typeSize), value, my.typeSize);

        if my.ini != NULL {
            my.ini(my.head + (my.count * my.typeSize));
        };

        my.count = my.count + 1;
        return my.count;
    };

    Result get(const int index) {
        if index >= my.count | index < 0 {
            res.reject(new IndexOutOfRangeError(`Index {index} out of range`))
        };

        const adr val = my.head + (index * my.typeSize);

        res.accept(val)
    };

    Result _call(const int index) {
        return my.get(index);
    };

    Option popBack() {
        if my.count == 0 {
            return opt.none();
        };

        my.count = my.count - 1;
        const adr val = my.head + (my.count * my.typeSize);
        return opt.some(val);
    };

    int getCount() {
        return my.count;
    };

    Option back() {
        return my.get(my.count - 1).resolve(opt.some, opt.none);
    };

    void pushValue(const any value) {
        if (my.typeSize > 8 )
            panic("Cannot push a reference by value");
        const let v = create(my.typeSize, value);
        my.pushBack(v);
        free(v);
    };

    private any unwrapGet(const int i) {
        return my.get(i).expect(`Failed to get value at index {i} from list`);
    };

    int forEach(const any<any, *int, *any> func, * const adr args) {
        for int i = 0; i < my.count; i = i + 1 {
            const adr val = my.unwrapGet(i);
            func(val, i, args);
        };
        return 0;
    };

    Option findFirst(const bool<any, *any> func, * const adr args) {
        for int i = 0; i < my.count; i = i + 1 {
            const any val = my.unwrapGet(i);
            const bool brk = func(val, args);
            if brk == true {
                return val;
            };
        };
        return opt.none();
    };

    int set(const int index, const adr value) {
        if index >= my.count {
            return 1;
        };

        memcpy(my.head + (index * my.typeSize), value, my.typeSize);
        return 0;
    };

    int insert(const int index, const adr value) {
        if index > my.count {
            return 1;
        };

        if my.count == my.size {
            my.size = my.size * 2;
            my.head = realloc(my.head, my.typeSize * my.size);
        };
        
        memcpy(my.head + ((index + 1) * my.typeSize), my.head + (index * my.typeSize), my.typeSize * (my.count - index));
        memcpy(my.head + (index * my.typeSize), value, my.typeSize);
        my.count = my.count + 1;
    };

    int drop(const int index) {
        if index >= my.count {
            return 1;
        };

        if my.delFunc != NULL {
            const adr delFunc = my.delFunc;
            delFunc(my.get(index));
        };

        memcpy(my.head + (index * my.typeSize), my.head + ((index + 1) * my.typeSize), my.typeSize * (my.count - index));
        my.count = my.count - 1;
    };

    List map(const int newTypeSize ,const adr func, * const adr args) {
        const let result = new List(newTypeSize, my.count);
        for int i = 0; i < my.count; i = i + 1 {
            const adr re = func(my.get(i), i, args);
            result.pushBack(re);
        };
        return result;
    };

    List where(const adr func, * const adr args) {
        const let result = new List(my.typeSize, my.count, my.delFunc, my.ini);
        for int i = 0; i < my.count; i = i + 1 {
            const any val = my.unwrapGet(i);
            const bool re = func(val, i, args);
            if re {
                result.pushBack(val);
            };
        };
        return result;
    };

    int reduce(const int<int, any, *int, *any> func, * const adr args) {
        int re = 0;
        for int i = 0; i < my.count; i = i + 1 {
            re = func(re, my.unwrapGet(i), i, args);
        };
        return re;
    };

    void stitch(const List other) {
        for int i = 0; i < other.count; i = i + 1 {
            my.pushBack(other.unwrapGet(i));
        };
    };

    string toString() {
        if my.stringFunc == NULL {
            const string ret = `List TypeSize: {my.typeSize} Size: {my.size} Count: {my.count}`;
            return ret;
        };

        const adr stringFunc = my.stringFunc;
        mutable string ret = `List TypeSize: {my.typeSize} Size: {my.size} Count: {my.count} [`;
        for int i = 0; i < my.count; i = i + 1 {
            const adr data = my.unwrapGet(i);
            const string str = stringFunc(data);
            ret = ret + str;
            if i != my.count - 1 {
                ret = ret + ", ";
            };
        };
        ret = ret + "]";
        return ret;
    };

    Scroller scroll() {
        return new Scroller(my);
    };

    int del() {
        if my.delFunc != NULL
            my.forEach(my.delFunc);
        free(my.head);
        return 0;
    };
};
