.needs <std>

import * from "io" under io;
import string from "String";
import Result from "Utils/Result";
import Iterator from "Collections/Iterator";
import Scroller from "Collections/Scroller";
import Option from "Utils/Option";
import Result from "Utils/Result";
import {accept, reject} from "Utils/Result" under res;
import {some, none} from "Utils/Option" under opt;
import Error from "Utils/Error";
import Render from "Utils/Error/Render";

class IndexOutOfRangeError signs Error {
    const string message = message.copy();

    string stdErrorMessage() : Render {
        return `{my._typeName}: {my.message}`;
    };

    IndexOutOfRangeError init(const string message) {
        return my;
    };
}

class List {
    private adr head = malloc(typeSize * size);
    private int typeSize = typeSize;
    private int size = size;
    private int count = 0;
    private adr delFunc = delFunc;
    private adr ini = ini;
    public adr stringFunc = NULL;

    List init(const int typeSize, *const int size, *const adr delFunc, *const adr ini) {
        if size == 0 {
            my.size = 1;
            my.head = malloc(typeSize);
        };
        return my;
    };

    fn toArray() -> adr {
        return my.head;
    };

    int pushBack(const adr value) {
        if my.count == my.size {
            my.size = my.size * 2;
            my.head = realloc(my.head, my.typeSize * my.size);
        };

        memcpy(my.head + (my.count * my.typeSize), value, my.typeSize);

        if my.ini != NULL {
            my.ini(my.head + (my.count * my.typeSize));
        };

        my.count = my.count + 1;
        return my.count;
    };

    Result get(const int index) {
        if index >= my.count | index < 0 {
            res.reject(new IndexOutOfRangeError(`Index {index} out of range`))
        };

        const adr val = my.head + (index * my.typeSize);

        res.accept(val)
    };

    Result _call(const int index) {
        my.get(index)
    };

    Option popBack() {
        if my.count == 0 {
            return opt.none();
        };

        my.count = my.count - 1;
        const adr val = my.head + (my.count * my.typeSize);
        return opt.some(val);
    };

    int getCount() {
        return my.count;
    };

    Option back() {
        return my.get(my.count - 1).resolve(opt.some, opt.none);
    };

    void pushValue(const any value) {
        if (my.typeSize > 8 )
            panic("Cannot push a reference by value");
        const let v = create(my.typeSize, value);
        my.pushBack(v);
        free(v);
    };

    private any unwrapGet(const int i) {
        return my.get(i).expect(`Failed to get value at index {i} from list`);
    };

    int forEach(const any<any, *int, *any> func, * const adr args) {
        for int i = 0; i < my.count; i = i + 1 {
            const adr val = my.unwrapGet(i);
            func(val, i, args);
        };
        return 0;
    };

    Option findFirst(const adr func, * const adr args) {
        for int i = 0; i < my.count; i = i + 1 {
            const any val = my.unwrapGet(i);
            const bool brk = func(val, args);
            if brk == true {
                return opt.some(val);
            };
        };
        return opt.none();
    };

    int set(const int index, const adr value) {
        if index >= my.count {
            return 1;
        };

        memcpy(my.head + (index * my.typeSize), value, my.typeSize);
        return 0;
    };

    int insert(const int index, const adr value) {
        if index > my.count {
            return 1;
        };

        if my.count == my.size {
            my.size = my.size * 2;
            my.head = realloc(my.head, my.typeSize * my.size);
        };
        
        memcpy(my.head + ((index + 1) * my.typeSize), my.head + (index * my.typeSize), my.typeSize * (my.count - index));
        memcpy(my.head + (index * my.typeSize), value, my.typeSize);
        my.count = my.count + 1;
    };

    int drop(const int index) {
        if index >= my.count {
            return 1;
        };

        if my.delFunc != NULL {
            const adr delFunc = my.delFunc;
            delFunc(my.get(index));
        };

        memcpy(my.head + (index * my.typeSize), my.head + ((index + 1) * my.typeSize), my.typeSize * (my.count - index));
        my.count = my.count - 1;
    };

    List map(const int newTypeSize ,const adr func, * const adr args) {
        const let result = new List(newTypeSize, my.count);
        for int i = 0; i < my.count; i = i + 1 {
            const adr re = func(my.get(i), i, args);
            result.pushBack(re);
        };
        return result;
    };

    List where(const adr func, * const adr args) {
        const let result = new List(my.typeSize, my.count, my.delFunc, my.ini);
        for int i = 0; i < my.count; i = i + 1 {
            const any val = my.unwrapGet(i);
            const bool re = func(val, i, args);
            if re {
                result.pushBack(val);
            };
        };
        return result;
    };

    int reduce(const int<int, any, *int, *any> func, * const adr args) {
        int re = 0;
        for int i = 0; i < my.count; i = i + 1 {
            re = func(re, my.unwrapGet(i), i, args);
        };
        return re;
    };

    void stitch(const List other) {
        for int i = 0; i < other.count; i = i + 1 {
            my.pushBack(other.unwrapGet(i));
        };
    };

    string toString() {
        if my.stringFunc == NULL {
            const string ret = `List TypeSize: {my.typeSize} Size: {my.size} Count: {my.count}`;
            return ret;
        };

        const adr stringFunc = my.stringFunc;
        mutable string ret = `List TypeSize: {my.typeSize} Size: {my.size} Count: {my.count} [`;
        for int i = 0; i < my.count; i = i + 1 {
            const adr data = my.unwrapGet(i);
            const string str = stringFunc(data);
            ret = ret + str;
            if i != my.count - 1 {
                ret = ret + ", ";
            };
        };
        ret = ret + "]";
        return ret;
    };

    Scroller scroll() {
        return new Scroller(my);
    };

    int del() {
        if my.delFunc != NULL
            my.forEach(my.delFunc);
        free(my.head);
        return 0;
    };
};
