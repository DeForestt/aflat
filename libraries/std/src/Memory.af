.needs <std> 

class RefCounted {
	private mutable int refCount = 0;
	private mutable bool locked = false;

	fn get() -> Self {
		my.refCount = my.refCount + 1;
		return my;
	};  

	fn endScope() {
		if my.locked return;
		my.refCount = my.refCount - 1;
		if (my.refCount <= 0) {
			delete my;
		};
	};

	fn lock() {
		my.locked = true;
	};

	fn unlock() {
		my.locked = false;
	};
};

types(T)
safe pedantic class Box {
	private mutable T value = value;

	fn init(const T &&value) -> Self {
		return my;
	};

	fn get() -> T {
		return my.value;
	};

	fn _set(const T &&value) -> Self {
		my.value = value;
		return my;
	};
};